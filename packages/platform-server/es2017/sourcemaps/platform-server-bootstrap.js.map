{"version":3,"file":"../platform-server-bootstrap.js","sources":["ApplicationBuilder.ts","index.ts"],"sourcesContent":["import { IContainer, IContainerBuilder, Injectable } from '@ts-ioc/core';\r\nimport { AppConfigure, DefaultApplicationBuilder, IApplicationBuilder, AnyApplicationBuilder, IAppConfigureLoader, AppConfigureLoaderToken } from '@ts-ioc/bootstrap';\r\nimport { existsSync } from 'fs';\r\nimport * as path from 'path';\r\nimport { ContainerBuilder } from '@ts-ioc/platform-server';\r\n\r\n\r\nexport interface ServerBuildExts {\r\n    /**\r\n     * root url\r\n     *\r\n     * @type {string}\r\n     * @memberof IPlatformServer\r\n     */\r\n    baseURL: string;\r\n    /**\r\n     * load module from dir\r\n     *\r\n     * @param {...string[]} matchPaths\r\n     * @memberof ServerBuildExts\r\n     */\r\n    loadDir(...matchPaths: string[]): this;\r\n}\r\n\r\n/**\r\n * server application builder.\r\n *\r\n * @export\r\n * @interface IServerApplicationBuilder\r\n * @extends {IApplicationBuilder<T>}\r\n * @template T\r\n */\r\nexport interface IApplicationBuilderServer<T> extends IApplicationBuilder<T>, ServerBuildExts {\r\n\r\n}\r\n\r\nexport interface AnyApplicationBuilderServer extends AnyApplicationBuilder, ServerBuildExts {\r\n\r\n}\r\n\r\n@Injectable(AppConfigureLoaderToken)\r\nexport class ConfigureFileLoader implements IAppConfigureLoader {\r\n    constructor(private baseURL: string, private container: IContainer) {\r\n\r\n    }\r\n    async load(uri?: string): Promise<AppConfigure> {\r\n        if (uri) {\r\n            if (existsSync(uri)) {\r\n                return require(uri) as AppConfigure;\r\n            } else if (existsSync(path.join(this.baseURL, uri))) {\r\n                return require(path.join(this.baseURL, uri)) as AppConfigure;\r\n            } else {\r\n                console.log(`config file: ${uri} not exists.`)\r\n                return null;\r\n            }\r\n        } else {\r\n            let cfgmodeles: AppConfigure;\r\n            let cfgpath = path.join(this.baseURL, './config');\r\n            ['.js', '.ts', '.json'].forEach(ext => {\r\n                if (cfgmodeles) {\r\n                    return false;\r\n                }\r\n                if (existsSync(cfgpath + ext)) {\r\n                    cfgmodeles = require(cfgpath + ext);\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            return cfgmodeles;\r\n        }\r\n    }\r\n\r\n\n                        static classAnnations:any  = {\"name\":\"ConfigureFileLoader\",\"params\":{\"constructor\":[\"baseURL\",\"container\"],\"load\":[\"uri\"]}};\n                   }\r\n\r\n\r\n/**\r\n * application builder for server side.\r\n *\r\n * @export\r\n * @class Bootstrap\r\n */\r\nexport class ApplicationBuilder<T> extends DefaultApplicationBuilder<T> implements IApplicationBuilderServer<T> {\r\n\r\n\r\n    private dirMatchs: string[][];\r\n    constructor(public baseURL: string) {\r\n        super(baseURL);\r\n        this.dirMatchs = [];\r\n    }\r\n\r\n    /**\r\n     * create instance.\r\n     *\r\n     * @static\r\n     * @template T\r\n     * @param {string} rootdir\r\n     * @returns {ApplicationBuilder}\r\n     * @memberof ApplicationBuilder\r\n     */\r\n    static create(rootdir: string): AnyApplicationBuilderServer {\r\n        return new ApplicationBuilder<any>(rootdir);\r\n    }\r\n\r\n    /**\r\n     * load module from dirs.\r\n     *\r\n     * @param {...string[]} matchPaths\r\n     * @returns {this}\r\n     * @memberof PlatformServer\r\n     */\r\n    loadDir(...matchPaths: string[]): this {\r\n        this.dirMatchs.push(matchPaths);\r\n        return this;\r\n    }\r\n\r\n    protected async registerExts(container: IContainer, config: AppConfigure): Promise<IContainer> {\r\n        await super.registerExts(container, config);\r\n        await Promise.all(this.dirMatchs.map(dirs => {\r\n            return container.loadModule(container, {\r\n                basePath: config.baseURL,\r\n                files: dirs\r\n            });\r\n        }));\r\n\r\n        return container;\r\n    }\r\n\r\n    protected createContainerBuilder(): IContainerBuilder {\r\n        return new ContainerBuilder();\r\n    }\r\n\r\n    protected createBuilder() {\r\n        return this;\r\n    }\r\n\r\n\n                        static classAnnations:any  = {\"name\":\"ApplicationBuilder\",\"params\":{\"constructor\":[\"baseURL\"],\"create\":[\"rootdir\"],\"loadDir\":[\"matchPaths\"],\"registerExts\":[\"container\",\"config\"],\"createContainerBuilder\":[],\"createBuilder\":[]}};\n                   }\r\n\r\n","export * from './ApplicationBuilder';\r\n"],"names":["require","core_1","platform_server_1"],"mappings":"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"}