{"version":3,"file":"../logs.js","sources":["Level.ts","ILoggerManager.ts","IConfigureLoggerManager.ts","LogConfigure.ts","ConfigureLoggerManger.ts","ConsoleLogManager.ts","LogFormater.ts","LoggerAspect.ts","AnnotationLogerAspect.ts","decorators/decorators/Logger.ts","LogModule.ts","index.ts"],"sourcesContent":["\r\n/**\r\n * log level items.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum Level {\r\n    log = 'log',\r\n    trace = 'trace',\r\n    debug = 'debug',\r\n    info = 'info',\r\n    warn = 'warn',\r\n    error = 'error',\r\n    fatal = 'fatal'\r\n}\r\n\r\n/**\r\n * log levels\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum Levels {\r\n    trace = 0,\r\n    debug,\r\n    info,\r\n    warn,\r\n    error,\r\n    fatal\r\n}\r\n","import { ObjectMap, InjectToken } from '@ts-ioc/core';\r\nimport { ILogger } from './ILogger';\r\n\r\n/**\r\n * logger configuation.\r\n *\r\n * @export\r\n * @interface LoggerConfig\r\n * @extends {ObjectMap<any>}\r\n */\r\nexport interface LoggerConfig extends ObjectMap<any> {\r\n}\r\n\r\n/**\r\n * LoggerManger interface token.\r\n * it is a token id, you can register yourself LoggerManger for this.\r\n */\r\nexport const LoggerManagerToken = new InjectToken<ILoggerManager>('DI_ILoggerManager');\r\n/**\r\n * logger manager.\r\n *\r\n * @export\r\n * @interface ILoggerManger\r\n */\r\nexport interface ILoggerManager {\r\n    /**\r\n     * config logger context.\r\n     *\r\n     * @param {LoggerConfig} config\r\n     * @memberof ILoggerManger\r\n     */\r\n    configure(config: LoggerConfig): void;\r\n    /**\r\n     * get logger.\r\n     *\r\n     * @param {string} [name]\r\n     * @returns {ILogger}\r\n     * @memberof ILoggerManger\r\n     */\r\n    getLogger(name?: string): ILogger\r\n}\r\n","import { ILoggerManager } from './ILoggerManager';\r\nimport { LogConfigure } from './LogConfigure';\r\nimport { Type, InjectToken } from '@ts-ioc/core';\r\n\r\n/**\r\n * IConfigureLoggerManager interface token.\r\n * it is a token id, you can register yourself IConfigureLoggerManager for this.\r\n */\r\nexport const ConfigureLoggerManagerToken = new InjectToken<IConfigureLoggerManager>('DI_IConfigureLoggerManager');\r\n\r\n/**\r\n * Configure logger manger. use to get configed logger manger.\r\n *\r\n * @export\r\n * @interface IConfigureLoggerManager\r\n * @extends {ILoggerManager}\r\n */\r\nexport interface IConfigureLoggerManager extends ILoggerManager {\r\n    /**\r\n     * readonly config.\r\n     *\r\n     * @type {LogConfigure}\r\n     * @memberof IConfigureLoggerManager\r\n     */\r\n    readonly config: LogConfigure;\r\n\r\n    /**\r\n     * set log configure.\r\n     *\r\n     * @param {(LogConfigure | Type<LogConfigure>)} config\r\n     * @memberof IConfigureLoggerManager\r\n     */\r\n    setLogConfigure(config: LogConfigure | Type<LogConfigure>);\r\n\r\n}\r\n","import { Token, ObjectMap, InjectToken } from '@ts-ioc/core';\r\nimport { ILoggerManager } from './ILoggerManager';\r\nimport { LOGFormater } from './LogFormater';\r\n\r\n/**\r\n * Log configure interface symbol.\r\n * it is a symbol id, you can register yourself LogConfigure for this.\r\n */\r\nexport const LogConfigureToken = new InjectToken<LogConfigure>('DI_LogConfigure');\r\n\r\n/**\r\n * log configure. config logger format, looger adapter.\r\n *\r\n * @export\r\n * @interface LogConfigure\r\n */\r\nexport interface LogConfigure {\r\n    /**\r\n     * log adapter\r\n     *\r\n     * @type {Token<ILoggerManager>)}\r\n     * @memberof LogConfigure\r\n     */\r\n    adapter: Token<ILoggerManager>,\r\n\r\n    /**\r\n     * logger config options.\r\n     *\r\n     * @type {ObjectMap<any>}\r\n     * @memberof LogConfigure\r\n     */\r\n    config?: ObjectMap<any>;\r\n\r\n    /**\r\n     * format\r\n     */\r\n    format?: LOGFormater;\r\n}\r\n","import { Injectable, IContainer, Inject, isString, Token, Registration, Type, isClass, ContainerToken } from '@ts-ioc/core';\r\nimport { ILoggerManager, LoggerManagerToken } from './ILoggerManager';\r\nimport { LogConfigure, LogConfigureToken } from './LogConfigure';\r\nimport { ILogger } from './ILogger';\r\nimport { IConfigureLoggerManager, ConfigureLoggerManagerToken } from './IConfigureLoggerManager';\r\nimport { NonePointcut } from '@ts-ioc/aop';\r\n\r\n/**\r\n * Configure logger manger. use to get configed logger manger.\r\n *\r\n * @export\r\n * @class LoggerManger\r\n * @implements {IConfigureLoggerManager}\r\n */\r\n@NonePointcut()\r\n@Injectable(ConfigureLoggerManagerToken)\r\nexport class ConfigureLoggerManger implements IConfigureLoggerManager {\r\n\r\n    private _config: LogConfigure;\r\n    private _logManger: ILoggerManager;\r\n\r\n    constructor(@Inject(ContainerToken) protected container: IContainer, config?: LogConfigure | Type<LogConfigure>) {\r\n        this.setLogConfigure(config);\r\n    }\r\n\r\n\r\n    get config(): LogConfigure {\r\n        if (!this._config) {\r\n            if (this.container.has(LogConfigureToken)) {\r\n                this._config = this.container.resolve(LogConfigureToken);\r\n            } else {\r\n                this._config = { adapter: 'console' };\r\n            }\r\n        }\r\n        return this._config;\r\n    }\r\n\r\n    setLogConfigure(config: LogConfigure | Type<LogConfigure>) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (isClass(config)) {\r\n            if (!this.container.has(LogConfigureToken)) {\r\n                this.container.register(LogConfigureToken, config);\r\n                this._config = this.container.get(LogConfigureToken);\r\n            } else if (!this.container.has(config)) {\r\n                this.container.register(config);\r\n                this._config = this.container.get<LogConfigure>(config);\r\n            }\r\n        } else {\r\n            this._config = config;\r\n        }\r\n        this._logManger = null;\r\n\r\n    }\r\n\r\n\r\n    protected get logManger(): ILoggerManager {\r\n        if (!this._logManger) {\r\n            let cfg: LogConfigure = this.config || <LogConfigure>{};\r\n            let adapter = cfg.adapter || 'console';\r\n            let token: Token<any>;\r\n            if (isString(adapter)) {\r\n                token = new Registration(LoggerManagerToken, adapter);\r\n            } else {\r\n                token = adapter;\r\n            }\r\n            this._logManger = this.container.get<ILoggerManager>(token);\r\n            if (cfg.config) {\r\n                this._logManger.configure(cfg.config);\r\n            }\r\n        }\r\n        return this._logManger;\r\n    }\r\n\r\n\r\n    configure(config: any) {\r\n        this.logManger.configure(config);\r\n    }\r\n\r\n    getLogger(name?: string): ILogger {\r\n        return this.logManger.getLogger(name);\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"ConfigureLoggerManger\",\"params\":{\"constructor\":[\"container\",\"config\"],\"setLogConfigure\":[\"config\"],\"configure\":[\"config\"],\"getLogger\":[\"name\"]}};\n                   }\r\n","import { Injectable, Singleton } from '@ts-ioc/core';\r\nimport { ILoggerManager, LoggerConfig, LoggerManagerToken } from './ILoggerManager';\r\nimport { ILogger } from './ILogger';\r\nimport { NonePointcut } from '@ts-ioc/aop';\r\nimport { Levels } from './Level';\r\n\r\n/**\r\n * console logger configuration.\r\n *\r\n * @export\r\n * @interface ConsoleLoggerConfig\r\n * @extends {LoggerConfig}\r\n */\r\nexport interface ConsoleLoggerConfig extends LoggerConfig {\r\n    level?: string;\r\n}\r\n\r\n@NonePointcut()\r\n@Singleton()\r\n@Injectable(LoggerManagerToken, 'console')\r\nexport class ConsoleLogManager implements ILoggerManager {\r\n    private logger: ILogger;\r\n    constructor() {\r\n        this.logger = new ConsoleLog();\r\n    }\r\n    configure(config: ConsoleLoggerConfig) {\r\n        if (config && config.level) {\r\n            this.logger.level = config.level;\r\n        }\r\n    }\r\n    getLogger(name?: string): ILogger {\r\n        return this.logger;\r\n    }\r\n\r\n\n                        static classAnnations:any  = {\"name\":\"ConsoleLogManager\",\"params\":{\"constructor\":[],\"configure\":[\"config\"],\"getLogger\":[\"name\"]}};\n                   }\r\n\r\n\r\nclass ConsoleLog implements ILogger {\r\n\r\n    level: string;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    log(message: any, ...args: any[]): void {\r\n        console.log(message, ...args);\r\n    }\r\n    trace(message: any, ...args: any[]): void {\r\n        if (!this.level || Levels[this.level] === 0) {\r\n            console.debug(message, ...args);\r\n        }\r\n    }\r\n    debug(message: any, ...args: any[]): void {\r\n        // console.debug in nuix will not console.\r\n        if (!this.level || Levels[this.level] <= 1) {\r\n            console.debug(message, ...args);\r\n        }\r\n    }\r\n    info(message: any, ...args: any[]): void {\r\n        if (!this.level || Levels[this.level] <= 2) {\r\n            console.info(message, ...args);\r\n        }\r\n    }\r\n    warn(message: any, ...args: any[]): void {\r\n        if (!this.level || Levels[this.level] <= 3) {\r\n            console.warn(message, ...args);\r\n        }\r\n    }\r\n    error(message: any, ...args: any[]): void {\r\n        if (!this.level || Levels[this.level] <= 4) {\r\n            console.error(message, ...args);\r\n        }\r\n    }\r\n    fatal(message: any, ...args: any[]): void {\r\n        if (!this.level || Levels[this.level] <= 5) {\r\n            console.error(message, ...args);\r\n        }\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"ConsoleLog\",\"params\":{\"constructor\":[],\"log\":[\"message\",\"args\"],\"trace\":[\"message\",\"args\"],\"debug\":[\"message\",\"args\"],\"info\":[\"message\",\"args\"],\"warn\":[\"message\",\"args\"],\"error\":[\"message\",\"args\"],\"fatal\":[\"message\",\"args\"]}};\n                   }\r\n","import { Singleton, isString, isSymbol, IParameter, isDate, isFunction, isArray, isObject, isBaseType, getClassName, isClass, InjectToken } from '@ts-ioc/core';\r\nimport { Joinpoint, JoinpointState, NonePointcut } from '@ts-ioc/aop';\r\n\r\n\r\n/**\r\n * Log formater interface token.\r\n * it is a token id, you can register yourself formater for log.\r\n */\r\nexport const LogFormaterToken = new InjectToken<ILogFormater>('DI_LogFormater');\r\n\r\n/**\r\n * log formater logs\r\n *\r\n * @export\r\n * @interface ILogFormater\r\n */\r\nexport interface ILogFormater {\r\n    /**\r\n     * format message.\r\n     *\r\n     * @param {Joinpoint} [joinPoint]\r\n     * @param {string} [message]\r\n     * @returns {string}\r\n     * @memberof ILogFormater\r\n     */\r\n    format(joinPoint?: Joinpoint, message?: string): string;\r\n}\r\n\r\n/**\r\n * log formater\r\n */\r\nexport type LOGFormater = ILogFormater | ((joinPoint?: Joinpoint, message?: string) => string) | string;\r\n\r\n\r\n@NonePointcut()\r\n@Singleton(LogFormaterToken, 'default')\r\nexport class LogFormater {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    format(joinPoint?: Joinpoint, message?: string): string {\r\n        let pointMsg: string;\r\n        switch (joinPoint.state) {\r\n            case JoinpointState.Before:\r\n            case JoinpointState.Pointcut:\r\n                pointMsg = `${joinPoint.state} invoke method \"${joinPoint.fullName}\" with args ${this.stringifyArgs(joinPoint.params, joinPoint.args)}.`;\r\n                break;\r\n            case JoinpointState.After:\r\n                pointMsg = `${joinPoint.state}  invoke method \"${joinPoint.fullName}\".`;\r\n                break;\r\n            case JoinpointState.AfterReturning:\r\n                pointMsg = `Invoke method \"${joinPoint.fullName}\" returning value ${this.stringify(joinPoint.returningValue)}.`;\r\n                break;\r\n            case JoinpointState.AfterThrowing:\r\n                pointMsg = `Invoke method \"${joinPoint.fullName}\" throw error ${this.stringify(joinPoint.throwing)}.`;\r\n                break;\r\n            default:\r\n                pointMsg = '';\r\n                break;\r\n        }\r\n\r\n        return this.joinMessage([pointMsg, message]);\r\n\r\n    }\r\n\r\n    protected stringifyArgs(params: IParameter[], args: any[]) {\r\n        let argsStr = params.map((p, idx) => {\r\n            let arg = args.length >= idx ? args[idx] : null;\r\n            return `<param name: \"${p.name || ''}\", param type: \"${this.stringify(p.type)}\"> ${this.stringify(arg)}`;\r\n        }).join(', ');\r\n        if (argsStr) {\r\n            return this.joinMessage(['[', argsStr, ']'], ' ');\r\n        } else {\r\n            return '[]';\r\n        }\r\n    }\r\n\r\n    protected joinMessage(messgs: any[], separator = '; ') {\r\n        return messgs.filter(a => a).map(a => isString(a) ? a : a.toString()).join(separator);\r\n    }\r\n\r\n    protected stringifyArray(args: any[]): string {\r\n        if (!args.length) {\r\n            return '[]';\r\n        }\r\n        return '[ ' + args.map(arg => this.stringify(arg)).join(', ') + ' ]';\r\n    }\r\n\r\n    protected stringify(target: any): string {\r\n        if (isString(target)) {\r\n            return target;\r\n        } else if (isArray(target)) {\r\n            return this.stringifyArray(target);\r\n        } else if (isBaseType(target)) {\r\n            return target;\r\n        } else if (isClass(target)) {\r\n            return `[class ${getClassName(target)}]`;\r\n        } else if (isFunction(target) || isDate(target) || isSymbol(target)) {\r\n            return target.toString();\r\n        } else if (isObject(target)) {\r\n            try {\r\n                return JSON.stringify(target);\r\n            } catch {\r\n                if (isFunction(target.toString)) {\r\n                    return target.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"LogFormater\",\"params\":{\"constructor\":[],\"format\":[\"joinPoint\",\"message\"],\"stringifyArgs\":[\"params\",\"args\"],\"joinMessage\":[\"messgs\",\"separator\"],\"stringifyArray\":[\"args\"],\"stringify\":[\"target\"]}};\n                   }\r\n","import { Level } from './Level';\r\nimport { Joinpoint, JoinpointState } from '@ts-ioc/aop';\r\nimport { IContainer, Abstract, isFunction, Type, isString, isClass, isObject, Registration } from '@ts-ioc/core';\r\n\r\nimport { LoggerMetadata } from './decorators/Logger';\r\nimport { LogConfigure } from './LogConfigure';\r\nimport { ILogger } from './ILogger';\r\nimport { IConfigureLoggerManager, ConfigureLoggerManagerToken } from './IConfigureLoggerManager';\r\nimport { ILogFormater, LogFormaterToken } from './LogFormater';\r\n\r\n/**\r\n * base looger aspect. for extends your logger aspect.\r\n *\r\n * @export\r\n * @class LoggerAspect\r\n */\r\n@Abstract()\r\nexport class LoggerAspect {\r\n\r\n    private _logger: ILogger;\r\n    private _logManger: IConfigureLoggerManager;\r\n\r\n    constructor(protected container: IContainer, private config?: LogConfigure | Type<LogConfigure>) {\r\n\r\n    }\r\n\r\n    get logger(): ILogger {\r\n        if (!this._logger) {\r\n            this._logger = this.logManger.getLogger();\r\n        }\r\n        return this._logger;\r\n    }\r\n\r\n    get logManger(): IConfigureLoggerManager {\r\n        if (!this._logManger) {\r\n            this._logManger = this.container.resolve(ConfigureLoggerManagerToken, { config: this.config });\r\n        }\r\n        return this._logManger;\r\n    }\r\n\r\n    protected processLog(joinPoint: Joinpoint, annotation?: LoggerMetadata[], message?: string, level?: Level) {\r\n        if (annotation && annotation.length) {\r\n            annotation.forEach(logmeta => {\r\n                let canlog = false;\r\n                if (logmeta.express && logmeta.express(joinPoint)) {\r\n                    canlog = true;\r\n                } else if (!logmeta.express) {\r\n                    canlog = true;\r\n                }\r\n                if (canlog) {\r\n                    this.writeLog(\r\n                        logmeta.logname ? this.logManger.getLogger(logmeta.logname) : this.logger,\r\n                        joinPoint,\r\n                        this.joinMessage(message, logmeta.message),\r\n                        logmeta.level || level);\r\n                }\r\n            });\r\n        } else {\r\n            this.writeLog(this.logger, joinPoint, message, level);\r\n        }\r\n    }\r\n\r\n    protected formatMessage(joinPoint: Joinpoint, message?: string) {\r\n        let config = this.logManger.config;\r\n        if (isClass(config.format)) {\r\n            if (!this.container.has(config.format)) {\r\n                this.container.register(config.format);\r\n            }\r\n            return this.container.resolve<ILogFormater>(config.format).format(joinPoint, message);\r\n        } else if (isFunction(config.format)) {\r\n            return config.format(joinPoint, message);\r\n        } else if (isObject(config.format) && isFunction(config.format)) {\r\n            return config.format.format(joinPoint, message);\r\n        } else {\r\n            let token = isString(config.format) ? config.format : '';\r\n            let foramter = this.container.resolve<ILogFormater>(new Registration(LogFormaterToken, token || 'default'));\r\n            if (foramter) {\r\n                return foramter.format(joinPoint, message);\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    protected joinMessage(...messgs: any[]) {\r\n        return messgs.filter(a => a).map(a => isString(a) ? a : a.toString()).join('; ');\r\n    }\r\n\r\n    protected writeLog(logger: ILogger, joinPoint: Joinpoint, message?: string, level?: Level) {\r\n\r\n        let formatStr = this.formatMessage(joinPoint, message);\r\n\r\n        if (level) {\r\n            logger[level](formatStr);\r\n        } else {\r\n            switch (joinPoint.state) {\r\n                case JoinpointState.Before:\r\n                case JoinpointState.After:\r\n                case JoinpointState.AfterReturning:\r\n                    logger.debug(formatStr);\r\n                    break;\r\n                case JoinpointState.Pointcut:\r\n                    logger.info(formatStr);\r\n                    break;\r\n\r\n                case JoinpointState.AfterThrowing:\r\n                    logger.error(formatStr);\r\n                    break;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"LoggerAspect\",\"params\":{\"constructor\":[\"container\",\"config\"],\"processLog\":[\"joinPoint\",\"annotation\",\"message\",\"level\"],\"formatMessage\":[\"joinPoint\",\"message\"],\"joinMessage\":[\"messgs\"],\"writeLog\":[\"logger\",\"joinPoint\",\"message\",\"level\"]}};\n                   }\r\n","import { IContainer, Singleton, Inject, ContainerToken } from '@ts-ioc/core';\r\nimport { Aspect, Joinpoint, Pointcut } from '@ts-ioc/aop';\r\nimport { LoggerMetadata } from './decorators/Logger';\r\nimport { LoggerAspect } from './LoggerAspect';\r\n\r\n/**\r\n * Annotation logger aspect. log for class or method with @Logger decorator.\r\n *\r\n * @export\r\n * @class AnnotationLogerAspect\r\n * @extends {LoggerAspect}\r\n */\r\n@Singleton()\r\n@Aspect()\r\nexport class AnnotationLogerAspect extends LoggerAspect {\r\n\r\n    constructor(@Inject(ContainerToken) container: IContainer) {\r\n        super(container)\r\n    }\r\n\r\n\r\n    @Pointcut('@annotation(Logger)', 'annotation')\r\n    logging(joinPoint: Joinpoint, annotation: LoggerMetadata[]) {\r\n        this.processLog(joinPoint, annotation);\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"AnnotationLogerAspect\",\"params\":{\"constructor\":[\"container\"],\"logging\":[\"joinPoint\",\"annotation\"]}};\n                   }\r\n","import { Level } from '../Level';\r\nimport { Express, TypeMetadata, IClassMethodDecorator, createClassMethodDecorator, ClassMethodDecorator, isClassMetadata, isString, isFunction } from '@ts-ioc/core';\r\n\r\n\r\nexport interface LoggerMetadata extends TypeMetadata {\r\n    /**\r\n     * set the special name to get logger from logger manager.\r\n     *\r\n     * @type {string}\r\n     * @memberof LoggerMetadata\r\n     */\r\n    logname?: string;\r\n\r\n    /**\r\n     * log level\r\n     */\r\n    level?: Level;\r\n\r\n    /**\r\n     * only match express condition can do loging.\r\n     *\r\n     * @type {Express<any, boolean>}\r\n     * @memberof LoggerMetadata\r\n     */\r\n    express?: Express<any, boolean>;\r\n    /**\r\n     * set special message to logging\r\n     *\r\n     * @type {string}\r\n     * @memberof LoggerMetadata\r\n     */\r\n    message?: string;\r\n}\r\n\r\n/**\r\n * Logger decorator, for method or class.\r\n *\r\n * @Logger\r\n *\r\n * @export\r\n * @interface ILoggerDecorator\r\n * @extends {IClassMethodDecorator<T>}\r\n * @template T\r\n */\r\nexport interface ILoggerDecorator<T extends LoggerMetadata> extends IClassMethodDecorator<T> {\r\n    /**\r\n     * define logger annotation pointcut to this class or method.\r\n     * @Logger\r\n     *\r\n     * @param {string} [logname] set the special name to get logger from logger manager.\r\n     * @param {Express<any, boolean>} [express] only match express condition can do logging.\r\n     * @param {string} [message] set special message to logging.\r\n     * @param {Level} [level] set log level to this message.\r\n     */\r\n    (logname?: string, express?: Express<any, boolean>, message?: string, level?: Level): ClassMethodDecorator;\r\n}\r\n\r\n/**\r\n * Logger decorator, for method or class.\r\n *\r\n * @Logger\r\n */\r\nexport const Logger: ILoggerDecorator<LoggerMetadata> = createClassMethodDecorator<TypeMetadata>('Logger',\r\n    adapter => {\r\n        adapter.next<LoggerMetadata>({\r\n            isMetadata: (arg) => isClassMetadata(arg, ['logname']),\r\n            match: (arg) => isString(arg),\r\n            setMetadata: (metadata, arg) => {\r\n                metadata.logname = arg;\r\n            }\r\n        });\r\n        adapter.next<LoggerMetadata>({\r\n            match: (arg) => isFunction(arg),\r\n            setMetadata: (metadata, arg) => {\r\n                metadata.express = arg;\r\n            }\r\n        });\r\n        adapter.next<LoggerMetadata>({\r\n            match: (arg) => isString(arg),\r\n            setMetadata: (metadata, arg) => {\r\n                metadata.message = arg;\r\n            }\r\n        });\r\n\r\n        adapter.next<LoggerMetadata>({\r\n            match: (arg) => isString(arg),\r\n            setMetadata: (metadata, arg: string) => {\r\n                metadata.level = Level[arg];\r\n            }\r\n        });\r\n    }) as ILoggerDecorator<LoggerMetadata>;\r\n","import { Inject, IContainer, LifeState, CoreActions, ContainerToken, LifeScopeToken, IocExt } from '@ts-ioc/core';\r\nimport { AopModule } from '@ts-ioc/aop';\r\nimport { Logger } from './decorators/Logger';\r\nimport { AnnotationLogerAspect } from './AnnotationLogerAspect';\r\nimport { ConsoleLogManager } from './ConsoleLogManager';\r\nimport { ConfigureLoggerManger } from './ConfigureLoggerManger';\r\nimport { LogFormater } from './LogFormater';\r\n\r\n/**\r\n * aop logs ext for Ioc. auto run setup after registered.\r\n * with @IocExt('setup') decorator.\r\n * @export\r\n * @class LogModule\r\n */\r\n@IocExt('setup')\r\nexport class LogModule {\r\n\r\n    constructor(@Inject(ContainerToken) private container: IContainer) {\r\n\r\n    }\r\n\r\n    /**\r\n     * register aop for container.\r\n     *\r\n     * @memberof AopModule\r\n     */\r\n    setup() {\r\n        let container = this.container;\r\n        if (!container.has(AopModule)) {\r\n            container.register(AopModule);\r\n        }\r\n        let lifeScope = container.get(LifeScopeToken);\r\n        lifeScope.registerDecorator(Logger, LifeState.onInit, CoreActions.bindParameterProviders);\r\n        container.register(ConfigureLoggerManger);\r\n        container.register(AnnotationLogerAspect);\r\n        container.register(LogFormater);\r\n        container.register(ConsoleLogManager);\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"LogModule\",\"params\":{\"constructor\":[\"container\"],\"setup\":[]}};\n                   }\r\n","// export * from './tokens';\r\nexport * from './Level';\r\nexport * from './ILogger';\r\nexport * from './ILoggerManager';\r\nexport * from './IConfigureLoggerManager';\r\nexport * from './ConfigureLoggerManger';\r\nexport * from './ConsoleLogManager';\r\nexport * from './LogConfigure';\r\nexport * from './LogFormater';\r\nexport * from './LoggerAspect';\r\nexport * from './AnnotationLogerAspect';\r\nexport * from './decorators/Logger';\r\nexport * from './LogModule';\r\n"],"names":["LogConfigure_1","ILoggerManager_1","IConfigureLoggerManager_1","Logger_1"],"mappings":"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"}