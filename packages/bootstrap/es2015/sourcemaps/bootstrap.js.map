{"version":3,"file":"../bootstrap.js","sources":["decorators/decorators/Annotation.ts","decorators/decorators/DIModule.ts","decorators/decorators/Bootstrap.ts","decorators/decorators/index.ts","boot/boot/AppConfigure.ts","modules/modules/DIModuleValidate.ts","utils/utils/ContainerPool.ts","utils/utils/Events.ts","utils/utils/index.ts","modules/modules/InjectedModule.ts","modules/modules/DIModuleInjector.ts","modules/modules/IModuleBuilder.ts","runnable/runnable/IRunner.ts","runnable/runnable/Service.ts","runnable/runnable/index.ts","annotations/annotations/IAnnotationBuilder.ts","annotations/annotations/AnnotationBuilder.ts","annotations/annotations/index.ts","modules/modules/ModuleBuilder.ts","modules/modules/index.ts","BootModule.ts","boot/boot/ApplicationBuilder.ts","boot/boot/IApplicationBuilder.ts","boot/boot/index.ts","index.ts"],"sourcesContent":["import { ITypeDecorator, Token, MetadataAdapter, MetadataExtends, createClassDecorator } from '@ts-ioc/core';\r\nimport { IAnnotationBuilder } from '../annotations/IAnnotationBuilder';\r\nimport { AnnotationConfigure } from '../annotations/AnnotationConfigure';\r\n\r\nexport interface AnnotationMetadata extends AnnotationConfigure<any> {\r\n\r\n}\r\n\r\n/**\r\n * Annotation decorator, use to define class build way via config.\r\n *\r\n * @export\r\n * @interface IAnnotationDecorator\r\n * @extends {ITypeDecorator<T>}\r\n * @template T\r\n */\r\nexport interface IAnnotationDecorator<T extends AnnotationMetadata> extends ITypeDecorator<T> {\r\n    /**\r\n     * Annotation decorator, use to define class as DI Module.\r\n     *\r\n     * @Build\r\n     *\r\n     * @param {T} [metadata] bootstrap metadate config.\r\n     */\r\n    (metadata: T): ClassDecorator;\r\n}\r\n\r\n/**\r\n * create type builder decorator\r\n *\r\n * @export\r\n * @template T\r\n * @param {string} name\r\n * @param {string} [decorType]\r\n * @param {(Token<IAnnotationBuilder<any>> | IAnnotationBuilder<any>)} [builder]\r\n * @param {MetadataAdapter} [adapter]\r\n * @param {MetadataExtends<T>} [metadataExtends]\r\n * @returns {IAnnotationDecorator<T>}\r\n */\r\nexport function createAnnotationDecorator<T extends AnnotationMetadata>(\r\n    name: string,\r\n    builder?: Token<IAnnotationBuilder<any>> | IAnnotationBuilder<any>,\r\n    adapter?: MetadataAdapter,\r\n    metadataExtends?: MetadataExtends<T>): IAnnotationDecorator<T> {\r\n\r\n    return createClassDecorator<AnnotationMetadata>(name,\r\n        args => {\r\n            if (adapter) {\r\n                adapter(args);\r\n            }\r\n        },\r\n        metadata => {\r\n            if (metadataExtends) {\r\n                metadata = metadataExtends(metadata as T);\r\n            }\r\n\r\n            if (builder && !metadata.annotationBuilder) {\r\n                metadata.annotationBuilder = builder;\r\n            }\r\n            return metadata;\r\n        }) as IAnnotationDecorator<T>;\r\n}\r\n\r\n\r\n/**\r\n * Annotation decorator, use to define class build way via config.\r\n *\r\n * @Annotation\r\n */\r\nexport const Annotation: IAnnotationDecorator<AnnotationMetadata> = createAnnotationDecorator<AnnotationMetadata>('Annotation');\r\n","import { createClassDecorator, Token, MetadataAdapter, MetadataExtends, ITypeDecorator, isClass } from '@ts-ioc/core';\r\nimport { IModuleBuilder } from '../modules/IModuleBuilder';\r\nimport { ModuleConfig } from '../modules/ModuleConfigure';\r\nimport { IAnnotationBuilder } from '../annotations/IAnnotationBuilder';\r\n\r\n/**\r\n * DI module metadata.\r\n *\r\n * @export\r\n * @interface DIModuleMetadata\r\n * @extends {ModuleConfig<any>}\r\n * @extends {ClassMetadata}\r\n */\r\nexport interface DIModuleMetadata extends ModuleConfig<any> {\r\n    /**\r\n     * custom decorator type.\r\n     *\r\n     * @type {string}\r\n     * @memberof DIModuleMetadata\r\n     */\r\n    decorType?: string;\r\n}\r\n\r\n\r\n/**\r\n * DIModule decorator, use to define class as DI Module.\r\n *\r\n * @export\r\n * @interface IDIModuleDecorator\r\n * @extends {ITypeDecorator<T>}\r\n * @template T\r\n */\r\nexport interface IDIModuleDecorator<T extends DIModuleMetadata> extends ITypeDecorator<T> {\r\n    /**\r\n     * DIModule decorator, use to define class as DI Module.\r\n     *\r\n     * @DIModule\r\n     *\r\n     * @param {T} [metadata] bootstrap metadate config.\r\n     */\r\n    (metadata: T): ClassDecorator;\r\n}\r\n\r\n\r\n/**\r\n * create bootstrap decorator.\r\n *\r\n * @export\r\n * @template T\r\n * @param {string} name decorator name.\r\n * @param {(Token<IModuleBuilder> | IModuleBuilder)} [builder]\r\n * @param {(Token<IAnnotationBuilder<any>> | IAnnotationBuilder<any>)} [annotationBuilder]\r\n * @param {MetadataAdapter} [adapter]\r\n * @param {MetadataExtends<T>} [metadataExtends]\r\n * @returns {IDIModuleDecorator<T>}\r\n */\r\nexport function createDIModuleDecorator<T extends DIModuleMetadata>(\r\n    name: string,\r\n    builder?: Token<IModuleBuilder<any>> | IModuleBuilder<any>,\r\n    annotationBuilder?: Token<IAnnotationBuilder<any>> | IAnnotationBuilder<any>,\r\n    adapter?: MetadataAdapter,\r\n    metadataExtends?: MetadataExtends<T>): IDIModuleDecorator<T> {\r\n\r\n    return createClassDecorator<DIModuleMetadata>(name,\r\n        args => {\r\n            if (adapter) {\r\n                adapter(args);\r\n            }\r\n        },\r\n        metadata => {\r\n            if (metadataExtends) {\r\n                metadata = metadataExtends(metadata as T);\r\n            }\r\n\r\n            if (!metadata.name && isClass(metadata.token)) {\r\n                let isuglify = /^[a-z]$/.test(metadata.token.name);\r\n                if (isuglify && metadata.token.classAnnations) {\r\n                    metadata.name = metadata.token.classAnnations.name;\r\n                } else {\r\n                    metadata.name = metadata.token.name;\r\n                }\r\n            }\r\n\r\n            metadata.decorType = name;\r\n            if (builder && !metadata.builder) {\r\n                metadata.builder = builder;\r\n            }\r\n            if (annotationBuilder && !metadata.annotationBuilder) {\r\n                metadata.annotationBuilder = annotationBuilder;\r\n            }\r\n            return metadata;\r\n        }) as IDIModuleDecorator<T>;\r\n}\r\n\r\n/**\r\n * DIModule Decorator, definde class as DI module.\r\n *\r\n * @DIModule\r\n */\r\nexport const DIModule: IDIModuleDecorator<DIModuleMetadata> = createDIModuleDecorator<DIModuleMetadata>('DIModule');\r\n","import {\r\n    Token, MetadataAdapter, MetadataExtends, ITypeDecorator,\r\n    Type, isClass, isFunction, LoadType, isObject\r\n} from '@ts-ioc/core';\r\nimport { AppConfigure } from '../boot/AppConfigure';\r\nimport { IApplicationBuilder } from '../boot/IApplicationBuilder';\r\nimport { IAnnotationBuilder } from '../annotations/IAnnotationBuilder';\r\nimport { createDIModuleDecorator } from './DIModule';\r\n\r\n\r\nexport interface BootstrapMetadata extends AppConfigure {\r\n    builder?: Type<IApplicationBuilder<any>> | IApplicationBuilder<any>;\r\n    globals?: LoadType[];\r\n}\r\n\r\n\r\n/**\r\n * Bootstrap decorator, use to define class is a task element.\r\n *\r\n * @export\r\n * @interface IBootstrapDecorator\r\n * @extends {ITypeDecorator<T>}\r\n * @template T\r\n */\r\nexport interface IBootstrapDecorator<T extends BootstrapMetadata> extends ITypeDecorator<T> {\r\n    /**\r\n     * Bootstrap decorator, use to define class as Application Bootstrap element.\r\n     *\r\n     * @Bootstrap\r\n     *\r\n     * @param {T} metadata bootstrap metadate config.\r\n     */\r\n    (metadata: T): ClassDecorator;\r\n}\r\n\r\n\r\n/**\r\n * create bootstrap decorator.\r\n *\r\n * @export\r\n * @template T\r\n * @param {string} name\r\n * @param {(Token<IApplicationBuilder> | IApplicationBuilder)} [builder] default builder\r\n * @param {(Token<IAnnotationBuilder<any>> | IAnnotationBuilder<Tany>)} [annotationBuilder] default type builder.\r\n * @param {MetadataAdapter} [adapter]\r\n * @param {MetadataExtends<T>} [metadataExtends]\r\n * @returns {IBootstrapDecorator<T>}\r\n */\r\nexport function createBootstrapDecorator<T extends BootstrapMetadata>(\r\n    name: string,\r\n    builder?: Type<IApplicationBuilder<any>> | IApplicationBuilder<any>,\r\n    annotationBuilder?: Token<IAnnotationBuilder<any>> | IAnnotationBuilder<any>,\r\n    adapter?: MetadataAdapter,\r\n    metadataExtends?: MetadataExtends<T>): IBootstrapDecorator<T> {\r\n\r\n    return createDIModuleDecorator<BootstrapMetadata>(name, builder, annotationBuilder, adapter, (metadata: T) => {\r\n        if (metadataExtends) {\r\n            metadataExtends(metadata);\r\n        }\r\n        if (metadata.builder) {\r\n            setTimeout(() => {\r\n                let builderType = metadata.builder;\r\n                let builder: IApplicationBuilder<any>;\r\n                if (isClass(builderType)) {\r\n                    builder = isFunction(builderType['create']) ? builderType['create']() : new builderType();\r\n                } else if (isObject(builderType)) {\r\n                    builder = builderType as IApplicationBuilder<any>;\r\n                }\r\n                if (builder) {\r\n                    if (metadata.globals) {\r\n                        builder.use(...metadata.globals);\r\n                    }\r\n                    builder.bootstrap(metadata.type);\r\n                }\r\n            }, 500);\r\n        }\r\n        return metadata;\r\n    }) as IBootstrapDecorator<T>;\r\n}\r\n\r\n/**\r\n * Bootstrap Decorator, definde class as mvc bootstrap module.\r\n *\r\n * @Bootstrap\r\n */\r\nexport const Bootstrap: IBootstrapDecorator<BootstrapMetadata> = createBootstrapDecorator<BootstrapMetadata>('Bootstrap');\r\n","export * from './Annotation';\r\nexport * from './DIModule';\r\nexport * from './Bootstrap';\r\n","import { ObjectMap, InjectToken } from '@ts-ioc/core';\r\nimport { ModuleConfigure } from '../modules';\r\n\r\n\r\n/**\r\n * application configuration token.\r\n */\r\nexport const AppConfigureToken = new InjectToken<AppConfigure>('DI_APP_Configuration');\r\n\r\n/**\r\n * application default configuration token.\r\n */\r\nexport const DefaultConfigureToken = new InjectToken<AppConfigure>('DI_Default_Configuration');\r\n\r\n/**\r\n * app configuration.\r\n *\r\n * @export\r\n * @interface AppConfigure\r\n * @extends {ObjectMap<any>}\r\n */\r\nexport interface AppConfigure extends ModuleConfigure {\r\n    /**\r\n     * application name.\r\n     *\r\n     * @type {string}\r\n     * @memberof AppConfigure\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * app base uri.\r\n     */\r\n    baseURL?: string;\r\n\r\n    /**\r\n     * set enable debug log or not.\r\n     *\r\n     * @type {boolean}\r\n     * @memberof AppConfigure\r\n     */\r\n    debug?: boolean;\r\n\r\n    /**\r\n     * log config.\r\n     *\r\n     * @type {*}\r\n     * @memberof AppConfigure\r\n     */\r\n    logConfig?: any;\r\n\r\n    /**\r\n     * custom config key value setting.\r\n     *\r\n     * @type {IMap<any>}\r\n     * @memberOf AppConfigure\r\n     */\r\n    setting?: ObjectMap<any>;\r\n\r\n    /**\r\n     * custom config connections.\r\n     *\r\n     * @type {ObjectMap<any>}\r\n     * @memberof AppConfigure\r\n     */\r\n    connections?: ObjectMap<any>;\r\n\r\n}\r\n\r\n/**\r\n * app configure loader.\r\n *\r\n * @export\r\n * @interface IAppConfigureLoader\r\n */\r\nexport interface IAppConfigureLoader {\r\n    /**\r\n     * load config.\r\n     *\r\n     * @param {string} [uri]\r\n     * @returns {Promise<AppConfigure>}\r\n     * @memberof AppConfigureLoader\r\n     */\r\n    load(uri?: string): Promise<AppConfigure>;\r\n}\r\n\r\n/**\r\n *  app configure loader token.\r\n */\r\nexport const AppConfigureLoaderToken = new InjectToken<IAppConfigureLoader>('DI_Configure_Loader');\r\n\r\n/**\r\n * configure merger\r\n *\r\n * @export\r\n * @interface IConfigureMerger\r\n */\r\nexport interface IConfigureMerger {\r\n    /**\r\n     * merge configuration.\r\n     *\r\n     * @param {AppConfigure} config\r\n     * @param {ModuleConfigure} moduleMetadata\r\n     * @returns {AppConfigure}\r\n     * @memberof IConfigureMerger\r\n     */\r\n    merge(config: AppConfigure, moduleMetadata: ModuleConfigure): AppConfigure;\r\n}\r\n","import { Singleton, InjectModuleValidateToken, BaseModuelValidate, IModuleValidate } from '@ts-ioc/core';\r\nimport { DIModule } from '../decorators';\r\n\r\n/**\r\n * DIModuel Validate Token\r\n */\r\nexport const DIModuelValidateToken = new InjectModuleValidateToken<IModuleValidate>(DIModule.toString());\r\n\r\n/**\r\n * DIModuel Validate\r\n *\r\n * @export\r\n * @class DIModuelValidate\r\n * @extends {BaseModuelValidate}\r\n */\r\n@Singleton(DIModuelValidateToken)\r\nexport class DIModuelValidate extends BaseModuelValidate {\r\n    getDecorator() {\r\n        return DIModule.toString();\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"DIModuelValidate\",\"params\":{\"getDecorator\":[]}};\n                   }\r\n","import { MapSet, Token, SymbolType, Registration, IContainer, InjectToken, IContainerBuilder } from '@ts-ioc/core';\r\n\r\n/**\r\n * container pool\r\n *\r\n * @export\r\n * @class ContainerPool\r\n */\r\nexport class ContainerPool {\r\n    protected pools: MapSet<Token<any>, IContainer>;\r\n\r\n    constructor(protected containerBuilder: IContainerBuilder) {\r\n        this.pools = new MapSet();\r\n    }\r\n\r\n    protected createContainer(): IContainer {\r\n        return this.containerBuilder.create();\r\n    }\r\n\r\n\r\n    getTokenKey(token: Token<any>): SymbolType<any> {\r\n        if (token instanceof Registration) {\r\n            return token.toString();\r\n        }\r\n        return token;\r\n    }\r\n\r\n    isDefault(container: IContainer): boolean {\r\n        return container === this._default;\r\n    }\r\n    hasDefault(): boolean {\r\n        return !!this._default;\r\n    }\r\n    _default: IContainer;\r\n\r\n    getDefault(): IContainer {\r\n        if (!this._default) {\r\n            this._default = this.createContainer();\r\n        }\r\n        return this._default;\r\n    }\r\n\r\n    set(token: Token<any>, container: IContainer) {\r\n        let key = this.getTokenKey(token);\r\n        if (this.pools.has(token)) {\r\n            console.log(`${token.toString()} module has loaded`);\r\n        }\r\n        this.pools.set(token, container);\r\n    }\r\n\r\n    get(token: Token<any>): IContainer {\r\n        let key = this.getTokenKey(token);\r\n        if (!this.has(key)) {\r\n            return null;\r\n        }\r\n        return this.pools.get(token);\r\n    }\r\n\r\n    has(token: Token<any>): boolean {\r\n        return this.pools.has(this.getTokenKey(token));\r\n    }\r\n\r\n    create(parent?: IContainer): IContainer {\r\n        parent = parent || this.getDefault();\r\n        let container = parent.getBuilder().create();\r\n        this.setParent(container, parent);\r\n        return container;\r\n    }\r\n\r\n    setParent(container: IContainer, parent?: IContainer) {\r\n        if (this.isDefault(container)) {\r\n            return;\r\n        }\r\n        // if (!container.parent) {\r\n        if (parent && parent !== container) {\r\n            container.parent = parent;\r\n        } else {\r\n            container.parent = this.getDefault();\r\n        }\r\n        // }\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"ContainerPool\",\"params\":{\"constructor\":[\"containerBuilder\"],\"createContainer\":[],\"getTokenKey\":[\"token\"],\"isDefault\":[\"container\"],\"hasDefault\":[],\"getDefault\":[],\"set\":[\"token\",\"container\"],\"get\":[\"token\"],\"has\":[\"token\"],\"create\":[\"parent\"],\"setParent\":[\"container\",\"parent\"]}};\n                   }\r\n\r\nexport const ContainerPoolToken = new InjectToken<ContainerPool>('ContainerPool');\r\n\r\n// /**\r\n//  *  global container pools.\r\n//  */\r\n// export const containerPools = new ContainerPool();\r\n","import { ObjectMap, isArray } from '@ts-ioc/core';\r\n\r\n/**\r\n * events\r\n *\r\n * @export\r\n * @interface IEvents\r\n */\r\nexport interface IEvents {\r\n    /**\r\n     * add event.\r\n     *\r\n     * @param {string} name\r\n     * @param {(...args: any[]) => void} event\r\n     * @returns {this}\r\n     * @memberof IEvents\r\n     */\r\n    on(name: string, event: (...args: any[]) => void): this;\r\n    /**\r\n     * remove event.\r\n     *\r\n     * @param {string} name\r\n     * @param {(...args: any[]) => void} [event]\r\n     * @returns {this}\r\n     * @memberof IEvents\r\n     */\r\n    off(name: string, event?: (...args: any[]) => void): this;\r\n    /**\r\n     * emit event.\r\n     *\r\n     * @param {string} name\r\n     * @param {...any[]} args\r\n     * @memberof IEvents\r\n     */\r\n    emit(name: string, ...args: any[]): void;\r\n}\r\n\r\n/**\r\n * custom events.\r\n *\r\n * @export\r\n * @class Events\r\n */\r\nexport class Events implements IEvents {\r\n    eventsMap: ObjectMap<Function[]>;\r\n    constructor() {\r\n        this.eventsMap = {};\r\n    }\r\n\r\n    on(name: string, event: (...args: any[]) => void) {\r\n        this.eventsMap[name] = this.eventsMap[name] || [];\r\n        if (this.eventsMap[name].indexOf(event) < 0) {\r\n            this.eventsMap[name].push(event);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    off(name: string, event?: (...args: any[]) => void) {\r\n        if (this.eventsMap[name]) {\r\n            if (event) {\r\n                this.eventsMap[name].splice(this.eventsMap[name].indexOf(event), 1);\r\n            } else {\r\n                delete this.eventsMap[name];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    emit(name: string, ...args: any[]) {\r\n        let events = this.eventsMap[name];\r\n        if (isArray(events)) {\r\n            events.forEach(ev => {\r\n                ev(...args);\r\n            });\r\n        }\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"Events\",\"params\":{\"constructor\":[],\"on\":[\"name\",\"event\"],\"off\":[\"name\",\"event\"],\"emit\":[\"name\",\"args\"]}};\n                   }\r\n","export * from './ContainerPool';\r\nexport * from './Events';\r\n","import { Token, IContainer, Registration, Type, IExports } from '@ts-ioc/core';\r\nimport { ModuleConfig } from './ModuleConfigure';\r\n\r\n/**\r\n * injected module.\r\n *\r\n * @export\r\n * @class InjectedModule\r\n * @template T\r\n */\r\nexport class InjectedModule<T> implements IExports {\r\n\r\n    constructor(\r\n        public token: Token<T>,\r\n        public config: ModuleConfig<T>,\r\n        public container: IContainer,\r\n        public type?: Type<any>,\r\n        public exports?: Token<any>[],\r\n        public providers?: Token<any>[]\r\n    ) {\r\n\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"InjectedModule\",\"params\":{\"constructor\":[\"token\",\"config\",\"container\",\"type\",\"exports\",\"providers\"]}};\n                   }\r\n\r\n\r\n\r\n/**\r\n * Injected Module Token.\r\n *\r\n * @export\r\n * @class InjectModuleMetaConfigToken\r\n * @extends {Registration<Type<T>>}\r\n * @template T\r\n */\r\nexport class InjectedModuleToken<T> extends Registration<InjectedModule<T>> {\r\n    constructor(type: Type<T>) {\r\n        super(type, 'InjectedModule')\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"InjectedModuleToken\",\"params\":{\"constructor\":[\"type\"]}};\n                   }\r\n","import {\r\n    Type, IContainer, ModuleInjector, InjectModuleInjectorToken, IModuleValidate,\r\n    Inject, Token, isToken, Providers, Injectable, isArray, lang, isUndefined, isClass,\r\n    isFunction, isString, isNull, isProviderMap, Provider, isBaseObject, IModuleInjector, Container\r\n} from '@ts-ioc/core';\r\nimport { DIModuelValidateToken } from './DIModuleValidate';\r\nimport { DIModule } from '../decorators';\r\nimport { ContainerPoolToken } from '../utils';\r\nimport { ModuleConfigure, ModuleConfig } from './ModuleConfigure';\r\nimport { InjectedModuleToken, InjectedModule } from './InjectedModule';\r\n\r\nconst exportsProvidersFiled = '__exportProviders';\r\n\r\n/**\r\n * DIModule injector interface.\r\n *\r\n * @export\r\n * @interface IDIModuleInjector\r\n * @extends {IModuleInjector}\r\n */\r\nexport interface IDIModuleInjector extends IModuleInjector {\r\n    /**\r\n     * import module type.\r\n     *\r\n     * @template T\r\n     * @param {IContainer} container\r\n     * @param {Type<T>} type\r\n     * @returns {Promise<InjectedModule<T>>}\r\n     * @memberof IDIModuleInjector\r\n     */\r\n    import<T>(container: IContainer, type: Type<T>): Promise<InjectedModule<T>>;\r\n\r\n    /**\r\n     * import by config.\r\n     *\r\n     * @template T\r\n     * @param {IContainer} container\r\n     * @param {ModuleConfig<T>} config\r\n     * @returns {Promise<any>>}\r\n     * @memberof IDIModuleInjector\r\n     */\r\n    importByConfig<T>(container: IContainer, config: ModuleConfig<T>): Promise<any>;\r\n}\r\n\r\n/**\r\n * DIModule injector token.\r\n */\r\nexport const DIModuleInjectorToken = new InjectModuleInjectorToken<IDIModuleInjector>(DIModule.toString());\r\n\r\n/**\r\n * DIModule injector.\r\n *\r\n * @export\r\n * @class DIModuleInjector\r\n * @extends {ModuleInjector}\r\n */\r\n@Injectable(DIModuleInjectorToken)\r\nexport class DIModuleInjector extends ModuleInjector implements IDIModuleInjector {\r\n\r\n    constructor(@Inject(DIModuelValidateToken) validate: IModuleValidate) {\r\n        super(validate)\r\n    }\r\n\r\n    protected async setup(container: IContainer, type: Type<any>) {\r\n        await this.importModule(container, type);\r\n    }\r\n\r\n    async import<T>(container: IContainer, type: Type<T>): Promise<InjectedModule<T>> {\r\n        if (this.validate.validate(type)) {\r\n            let injMd = await this.importModule(container, type);\r\n            return injMd;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async importByConfig<T>(container: IContainer, config: ModuleConfig<T>): Promise<any> {\r\n        await this.registerConfgureDepds(container, config);\r\n        if (isArray(config.providers) && config.providers.length) {\r\n            await this.bindProvider(container, config.providers);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected async importModule(container: IContainer, type: Type<any>): Promise<InjectedModule<any>> {\r\n        let pools = container.get(ContainerPoolToken);\r\n        let newContainer = pools.create(container);\r\n        newContainer.register(type);\r\n        let metaConfig = this.validate.getMetaConfig(type, newContainer) as ModuleConfigure;\r\n        metaConfig = await this.registerConfgureDepds(newContainer, metaConfig);\r\n\r\n        let injMd = new InjectedModule(metaConfig.token || type, metaConfig, newContainer, type, metaConfig.exports || [], metaConfig[exportsProvidersFiled]);\r\n        container.bindProvider(new InjectedModuleToken(type), injMd);\r\n\r\n        await this.importConfigExports(container, newContainer, injMd);\r\n\r\n        return injMd;\r\n    }\r\n\r\n\r\n    protected async registerConfgureDepds(container: IContainer, config: ModuleConfigure): Promise<ModuleConfigure> {\r\n        if (isArray(config.imports) && config.imports.length) {\r\n            await container.loadModule(...config.imports);\r\n        }\r\n\r\n        if (isArray(config.providers) && config.providers.length) {\r\n            config[exportsProvidersFiled] = this.bindProvider(container, config.providers);\r\n        }\r\n        return config;\r\n    }\r\n\r\n    protected async importConfigExports(container: IContainer, providerContainer: IContainer, injMd: InjectedModule<any>) {\r\n        if (container === providerContainer) {\r\n            return container;\r\n        }\r\n        if (injMd) {\r\n            container.resolvers.next(injMd);\r\n            if (injMd.exports && injMd.exports.length) {\r\n                let expchs = providerContainer.resolvers.toArray().filter(r => {\r\n                    if (r instanceof Container) {\r\n                        return false;\r\n                    } else {\r\n                        return injMd.exports.indexOf(r.type) >= 0\r\n                    }\r\n                });\r\n                expchs.forEach(r => {\r\n                    container.resolvers.next(r);\r\n                });\r\n            }\r\n        }\r\n\r\n        return container;\r\n    }\r\n\r\n    protected bindProvider(container: IContainer, providers: Providers[]): Token<any>[] {\r\n        let tokens: Token<any>[] = [];\r\n        providers.forEach((p, index) => {\r\n            if (isUndefined(p) || isNull(p)) {\r\n                return;\r\n            }\r\n            if (isProviderMap(p)) {\r\n                p.forEach((k, f) => {\r\n                    tokens.push(k);\r\n                    container.bindProvider(k, f);\r\n                });\r\n            } else if (p instanceof Provider) {\r\n                tokens.push(p.type);\r\n                container.bindProvider(p.type, (...providers: Providers[]) => p.resolve(container, ...providers));\r\n            } else if (isClass(p)) {\r\n                if (!container.has(p)) {\r\n                    tokens.push(p);\r\n                    container.register(p);\r\n                }\r\n            } else if (isBaseObject(p)) {\r\n                let pr: any = p;\r\n                let isobjMap = false;\r\n                if (isToken(pr.provide)) {\r\n                    if (isArray(pr.deps) && pr.deps.length) {\r\n                        pr.deps.forEach(d => {\r\n                            if (isClass(d) && !container.has(d)) {\r\n                                container.register(d);\r\n                            }\r\n                        });\r\n                    }\r\n                    if (!isUndefined(pr.useValue)) {\r\n                        tokens.push(pr.provide);\r\n                        container.bindProvider(pr.provide, () => pr.useValue);\r\n                    } else if (isClass(pr.useClass)) {\r\n                        if (!container.has(pr.useClass)) {\r\n                            container.register(pr.useClass);\r\n                        }\r\n                        tokens.push(pr.provide);\r\n                        container.bindProvider(pr.provide, pr.useClass);\r\n                    } else if (isFunction(pr.useFactory)) {\r\n                        tokens.push(pr.provide);\r\n                        container.bindProvider(pr.provide, () => {\r\n                            let args = [];\r\n                            if (isArray(pr.deps) && pr.deps.length) {\r\n                                args = pr.deps.map(d => {\r\n                                    if (isClass(d)) {\r\n                                        return container.get(d);\r\n                                    } else {\r\n                                        return d;\r\n                                    }\r\n                                });\r\n                            }\r\n                            return pr.useFactory.apply(pr, args);\r\n                        });\r\n                    } else if (isToken(pr.useExisting)) {\r\n                        if (container.has(pr.useExisting)) {\r\n                            tokens.push(pr.provide);\r\n                            container.bindProvider(pr.provide, pr.useExisting);\r\n                        } else {\r\n                            console.log('has not register:', pr.useExisting);\r\n                        }\r\n                    } else {\r\n                        isobjMap = true;\r\n                    }\r\n                } else {\r\n                    isobjMap = true;\r\n                }\r\n\r\n                if (isobjMap) {\r\n                    lang.forIn<any>(p, (val, name: string) => {\r\n                        if (!isUndefined(val)) {\r\n                            if (isClass(val)) {\r\n                                container.bindProvider(name, val);\r\n                            } else if (isFunction(val) || isString(val)) {\r\n                                container.bindProvider(name, () => val);\r\n                            } else {\r\n                                container.bindProvider(name, val);\r\n                            }\r\n                            tokens.push(name);\r\n                        }\r\n                    });\r\n                }\r\n            } else if (isFunction(p)) {\r\n                tokens.push(name);\r\n                container.bindProvider(name, () => p);\r\n            }\r\n        });\r\n\r\n        return tokens;\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"DIModuleInjector\",\"params\":{\"constructor\":[\"validate\"],\"setup\":[\"container\",\"type\"],\"import\":[\"container\",\"type\"],\"importByConfig\":[\"container\",\"config\"],\"importModule\":[\"container\",\"type\"],\"registerConfgureDepds\":[\"container\",\"config\"],\"importConfigExports\":[\"container\",\"providerContainer\",\"injMd\"],\"bindProvider\":[\"container\",\"providers\"]}};\n                   }\r\n","import { Registration, IContainer, Token } from '@ts-ioc/core';\r\nimport { ModuleConfig } from './ModuleConfigure';\r\nimport { MdInstance } from './ModuleType';\r\nimport { ContainerPool } from '../utils';\r\nimport { Runnable } from '../runnable';\r\nimport { InjectedModule } from './InjectedModule';\r\n\r\nconst moduleBuilderDesc = 'DI_ModuleBuilder';\r\n\r\n/**\r\n * inject module builder token.\r\n *\r\n * @export\r\n * @class InjectModuleBuilder\r\n * @extends {Registration<T>}\r\n * @template T\r\n */\r\nexport class InjectModuleBuilderToken<T> extends Registration<IModuleBuilder<T>> {\r\n    constructor(type: Token<T>) {\r\n        super(type, moduleBuilderDesc);\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"InjectModuleBuilderToken\",\"params\":{\"constructor\":[\"type\"]}};\n                   }\r\n\r\n/**\r\n * load default container or, loaded module.\r\n */\r\nexport type ModuleEnv = IContainer | InjectedModule<any>;\r\n\r\n\r\n/**\r\n * Generics module builder insterface.\r\n *\r\n * @export\r\n * @interface IGModuleBuilder\r\n * @template T\r\n */\r\nexport interface IModuleBuilder<T> {\r\n\r\n    /**\r\n     * get container pool\r\n     *\r\n     * @returns {ContainerPool}\r\n     * @memberof IModuleBuilder\r\n     */\r\n    getPools(): ContainerPool;\r\n\r\n    /**\r\n     * import module.\r\n     *\r\n     * @param {Token<T>} module\r\n     * @param {IContainer} [parent]\r\n     * @returns {Promise<InjectedModule<T>>}\r\n     * @memberof IModuleBuilder\r\n     */\r\n    import(module: Token<T>, parent?: IContainer): Promise<InjectedModule<T>>;\r\n\r\n    /**\r\n     * build module as ioc container.\r\n     *\r\n     * @param {(Token<T> | ModuleConfig<T>)} token\r\n     * @param {ModuleEnv} [env]\r\n     * @param {*} [data] bootstrap data, build data, Runnable data.\r\n     * @returns {Promise<T>}\r\n     * @memberof IModuleBuilder\r\n     */\r\n    build(token: Token<T> | ModuleConfig<T>, env?: ModuleEnv, data?: any): Promise<T>;\r\n\r\n\r\n\r\n    /**\r\n     * bootstrap module's main.\r\n     *\r\n     * @param {(Token<T> | ModuleConfig<T>)} token\r\n     * @param {ModuleEnv} [env]\r\n     * @param {*} [data] bootstrap data, build data, Runnable data.\r\n     * @returns {Promise<MdInstance<T>>}\r\n     * @memberof IGModuleBuilder\r\n     */\r\n    bootstrap(token: Token<T> | ModuleConfig<T>, env?: ModuleEnv, data?: any): Promise<Runnable<T>>;\r\n\r\n}\r\n\r\n/**\r\n * default module builder token.\r\n */\r\nexport const DefaultModuleBuilderToken = new InjectModuleBuilderToken<any>(Object);\r\n\r\n/**\r\n * module builder token.\r\n */\r\nexport const ModuleBuilderToken = new Registration<AnyModuleBuilder>('any', moduleBuilderDesc);\r\n\r\n/**\r\n *  module builder. objected generics to any\r\n *\r\n * @export\r\n * @interface AnyModuleBuilder\r\n * @extends {IModuleBuilder<any>}\r\n */\r\nexport interface AnyModuleBuilder extends IModuleBuilder<any> {\r\n\r\n    /**\r\n     * build module as ioc container.\r\n     *\r\n     * @param {(Token<T> | ModuleConfig<T>)} token\r\n     * @param {ModuleEnv} [env]\r\n     * @param {*} [data]\r\n     * @returns {Promise<T>}\r\n     * @memberof AnyModuleBuilder\r\n     */\r\n    build<T>(token: Token<T> | ModuleConfig<T>, env?: ModuleEnv, data?: any): Promise<MdInstance<T>>;\r\n\r\n}\r\n\r\n","import { Registration, Token } from '@ts-ioc/core';\r\nimport { ModuleConfigure } from '../modules';\r\n\r\n/**\r\n * application runer.\r\n *\r\n * @export\r\n * @interface IRunner\r\n * @template T\r\n */\r\nexport interface IRunner<T> {\r\n\r\n    /**\r\n     * run application via boot instance.\r\n     *\r\n     * @param {*} [data]\r\n     * @returns {Promise<any>}\r\n     * @memberof IRunner\r\n     */\r\n    run(data?: any): Promise<any>;\r\n}\r\n\r\n/**\r\n * boot element.\r\n *\r\n * @export\r\n * @abstract\r\n * @class Boot\r\n * @implements {IBoot}\r\n */\r\nexport abstract class Runner<T> implements IRunner<T> {\r\n\r\n    constructor(protected token?: Token<T>, protected instance?: T, protected config?: ModuleConfigure) {\r\n\r\n    }\r\n\r\n    /**\r\n     * run boot.\r\n     *\r\n     * @abstract\r\n     * @param {*} [data]\r\n     * @returns {Promise<any>}\r\n     * @memberof Runner\r\n     */\r\n    abstract run(data?: any): Promise<any>;\r\n\n                        static classAnnations:any  = {\"name\":\"Runner\",\"params\":{\"constructor\":[\"token\",\"instance\",\"config\"],\"run\":[\"data\"]}};\n                   }\r\n\r\n/**\r\n * boot element\r\n *\r\n * @export\r\n * @class Boot\r\n * @extends {Runner<any>}\r\n */\r\nexport abstract class Boot extends Runner<any> {\r\n    constructor(protected token?: Token<any>, protected instance?: any, protected config?: ModuleConfigure) {\r\n        super(token, instance, config);\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"Boot\",\"params\":{\"constructor\":[\"token\",\"instance\",\"config\"]}};\n                   }\r\n\r\n\r\n/**\r\n * application runner token.\r\n *\r\n * @export\r\n * @class InjectRunnerToken\r\n * @extends {Registration<IRunner<T>>}\r\n * @template T\r\n */\r\nexport class InjectRunnerToken<T> extends Registration<IRunner<T>> {\r\n    constructor(type: Token<T>) {\r\n        super(type, 'boot__runner');\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"InjectRunnerToken\",\"params\":{\"constructor\":[\"type\"]}};\n                   }\r\n\r\n\r\n/**\r\n * default runner token.\r\n */\r\nexport const DefaultRunnerToken = new InjectRunnerToken<any>('default');\r\n","import { Token, Registration } from '@ts-ioc/core';\r\nimport { ModuleConfigure } from '../modules';\r\n\r\n/**\r\n * IService interface\r\n *\r\n * @export\r\n * @interface IService\r\n */\r\nexport interface IService<T> {\r\n\r\n    /**\r\n     * start application service.\r\n     *\r\n     * @returns {Promise<any>}\r\n     * @memberof IService\r\n     */\r\n    start(data?: any): Promise<any>;\r\n    /**\r\n     * stop server.\r\n     *\r\n     * @returns {Promise<any>}\r\n     * @memberof IService\r\n     */\r\n    stop?(): Promise<any>;\r\n}\r\n\r\n/**\r\n * base service.\r\n *\r\n * @export\r\n * @abstract\r\n * @class Service\r\n * @implements {IService}\r\n */\r\nexport abstract class Service<T> implements IService<T> {\r\n\r\n    constructor(protected token?: Token<T>, protected instance?: T, protected config?: ModuleConfigure) {\r\n\r\n    }\r\n    /**\r\n     * start service.\r\n     *\r\n     * @abstract\r\n     * @param {*} [data]\r\n     * @returns {Promise<any>}\r\n     * @memberof Service\r\n     */\r\n    abstract start(data?: any): Promise<any>;\r\n    /**\r\n     * stop service.\r\n     *\r\n     * @abstract\r\n     * @returns {Promise<any>}\r\n     * @memberof Service\r\n     */\r\n    abstract stop(): Promise<any>;\r\n\n                        static classAnnations:any  = {\"name\":\"Service\",\"params\":{\"constructor\":[\"token\",\"instance\",\"config\"],\"start\":[\"data\"],\"stop\":[]}};\n                   }\r\n\r\n\r\n/**\r\n * application service token.\r\n *\r\n * @export\r\n * @class InjectServiceToken\r\n * @extends {Registration<IService<T>>}\r\n * @template T\r\n */\r\nexport class InjectServiceToken<T> extends Registration<IService<T>> {\r\n    constructor(type: Token<T>) {\r\n        super(type, 'boot__service');\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"InjectServiceToken\",\"params\":{\"constructor\":[\"type\"]}};\n                   }\r\n\r\n/**\r\n * default service token.\r\n */\r\nexport const DefaultServiceToken = new InjectServiceToken<any>('default');\r\n","export * from './IRunner';\r\nexport * from './Service';\r\nexport * from './types';\r\n","import { Registration, IContainer, Token } from '@ts-ioc/core';\r\nimport { AnnotationConfigure } from './AnnotationConfigure';\r\n\r\n\r\nconst annoBuilderDesc = 'DI_AnnotationBuilder';\r\n\r\n\r\n/**\r\n * Annotation class builder.\r\n *\r\n * @export\r\n * @interface IBootBuilder\r\n */\r\nexport interface IAnnotationBuilder<T> {\r\n\r\n    /**\r\n     * container.\r\n     *\r\n     * @type {IContainer}\r\n     * @memberof IBootstrapBuilder\r\n     */\r\n    container: IContainer;\r\n\r\n    /**\r\n     * build token type via config.\r\n     *\r\n     * @param {Token<T>} token\r\n     * @param {AnnotationConfigure<T>} [config]\r\n     * @param {*} [data] build data\r\n     * @returns {Promise<T>}\r\n     * @memberof ITypeBuilder\r\n     */\r\n    build(token: Token<T>, config?: AnnotationConfigure<T>, data?: any): Promise<T>;\r\n\r\n    /**\r\n     * build instance via type config.\r\n     *\r\n     * @param {(Token<T> | AnnotationConfigure<T>)} config\r\n     * @param {*} [data] build data\r\n     * @returns {Promise<T>}\r\n     * @memberof IBootBuilder\r\n     */\r\n    buildByConfig(config: Token<T> | AnnotationConfigure<T>, data?: any): Promise<T>;\r\n\r\n    /**\r\n     * get finally builder by token and config.\r\n     *\r\n     * @param {Token<T>} token\r\n     * @param {AnnotationConfigure<T>} [config]\r\n     * @returns {IAnnotationBuilder<T>}\r\n     * @memberof IBootBuilder\r\n     */\r\n    getBuilder(token: Token<T>, config?: AnnotationConfigure<T>): IAnnotationBuilder<T>;\r\n\r\n    /**\r\n     * get annoation type token.\r\n     *\r\n     * @param {AnnotationConfigure<T>} config\r\n     * @returns {Token<T>}\r\n     * @memberof IBootstrapBuilder\r\n     */\r\n    getType(config: AnnotationConfigure<T>): Token<T>;\r\n\r\n    /**\r\n     * create token instance.\r\n     *\r\n     * @param {Token<T>} token\r\n     * @param {AnnotationConfigure<T>} config\r\n     * @param {*} [data] the data to init instance.\r\n     * @returns {Promise<T>}\r\n     * @memberof IBootstrapBuilder\r\n     */\r\n    createInstance(token: Token<T>, config: AnnotationConfigure<T>, data?: any): Promise<T>;\r\n\r\n    /**\r\n     * bundle bootstrap instance via config.\r\n     *\r\n     * @param {T} instance\r\n     * @param {AnnotationConfigure<T>} config\r\n     * @param {*} [data] the data to init instance.\r\n     * @returns {Promise<T>}\r\n     * @memberof IBootstrapBuilder\r\n     */\r\n    buildStrategy(instance: T, config: AnnotationConfigure<T>, data?: any): Promise<T>;\r\n}\r\n\r\n/**\r\n * any class bootstrap builder\r\n *\r\n * @export\r\n * @interface AnyBootstrapBuilder\r\n * @extends {IAnnotationBuilder<any>}\r\n */\r\nexport interface IAnyTypeBuilder extends IAnnotationBuilder<any> {\r\n    /**\r\n     * bootstrap ioc module.\r\n     *\r\n     * @template T\r\n     * @param {Token<T>} token\r\n     * @param {AnnotationConfigure<T>} config\r\n     * @param {*} [data]\r\n     * @returns {Promise<T>}\r\n     * @memberof AnyBootstrapBuilder\r\n     */\r\n    build<T>(token: Token<T>, config: AnnotationConfigure<T>, data?: any): Promise<T>;\r\n}\r\n\r\n/**\r\n * inject Annotation class builder.\r\n *\r\n * @export\r\n * @class InjectBootstrapBuilder\r\n * @extends {Registration<T>}\r\n * @template T\r\n */\r\nexport class InjectAnnotationBuilder<T> extends Registration<IAnnotationBuilder<T>> {\r\n    constructor(type: Token<T>) {\r\n        super(type, annoBuilderDesc);\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"InjectAnnotationBuilder\",\"params\":{\"constructor\":[\"type\"]}};\n                   }\r\n\r\n\r\n/**\r\n * Annotation class builder token.\r\n */\r\nexport const AnnotationBuilderToken = new Registration<IAnyTypeBuilder>(Object, annoBuilderDesc);\r\n\r\n/**\r\n * Default Annotation class builder token.\r\n */\r\nexport const DefaultAnnotationBuilderToken = new InjectAnnotationBuilder<any>('default');\r\n","import { IAnnotationBuilder, AnnotationBuilderToken, InjectAnnotationBuilder } from './IAnnotationBuilder';\r\nimport {\r\n    Token, isToken, IContainer, isClass, Inject, ContainerToken, Type,\r\n    lang, isFunction, Injectable, AnnotationMetaAccessorToken\r\n} from '@ts-ioc/core';\r\nimport { AnnotationConfigure } from './AnnotationConfigure';\r\nimport { Annotation } from '../decorators';\r\nimport { AnnoInstance } from './IAnnotation';\r\n\r\n/**\r\n * Annotation class builder. build class with metadata and config.\r\n *\r\n * @export\r\n * @class AnnotationBuilder\r\n * @implements {implements IAnnotationBuilder<T>}\r\n * @template T\r\n */\r\n@Injectable(AnnotationBuilderToken)\r\nexport class AnnotationBuilder<T> implements IAnnotationBuilder<T> {\r\n    /**\r\n     * ioc container.\r\n     *\r\n     * @type {IContainer}\r\n     * @memberof BootBuilder\r\n     */\r\n    @Inject(ContainerToken)\r\n    public container: IContainer;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    async build(token: Token<T>, config?: AnnotationConfigure<T>, data?: any): Promise<T> {\r\n        if (isClass(token) && !this.container.hasRegister(token)) {\r\n            this.container.register(token);\r\n        }\r\n        config = this.getTokenMetaConfig(token, config);\r\n        let builder = this.getBuilder(token, config);\r\n        if (!this.isEqual(builder)) {\r\n            return builder.build(token, config, data);\r\n        } else {\r\n            await this.registerExts(config);\r\n            let instance = await this.createInstance(token, config, data) as AnnoInstance<T>;\r\n            if (!instance) {\r\n                return null;\r\n            }\r\n            if (isFunction(instance.anBeforeInit)) {\r\n                await Promise.resolve(instance.anBeforeInit(config));\r\n            }\r\n            instance = await this.buildStrategy(instance, config, data) as AnnoInstance<T>;\r\n            if (isFunction(instance.anAfterInit)) {\r\n                await Promise.resolve(instance.anAfterInit(config));\r\n            }\r\n            return instance;\r\n        }\r\n    }\r\n\r\n    async buildByConfig(config: Token<T> | AnnotationConfigure<T>, data?: any): Promise<any> {\r\n        let token: Token<T>;\r\n        if (isToken(config)) {\r\n            token = config;\r\n            return this.build(token, null, data);\r\n        } else {\r\n            token = this.getType(config);\r\n            return this.build(token, config, data);\r\n        }\r\n    }\r\n\r\n    async createInstance(token: Token<T>, config: AnnotationConfigure<T>, data?: any): Promise<T> {\r\n        if (!token) {\r\n            console.log('can not find annotation token.');\r\n            return null;\r\n        }\r\n\r\n        if (!this.container.has(token)) {\r\n            console.log(`can not find token ${token ? token.toString() : null} in container.`);\r\n            return null;\r\n        }\r\n\r\n\r\n        let instance = this.resolveToken(token, data);\r\n        return instance;\r\n    }\r\n\r\n    getBuilder(token: Token<T>, config?: AnnotationConfigure<T>): IAnnotationBuilder<T> {\r\n        let builder: IAnnotationBuilder<T>;\r\n        if (config && config.annotationBuilder) {\r\n            if (isClass(config.annotationBuilder)) {\r\n                if (!this.container.has(config.annotationBuilder)) {\r\n                    this.container.register(config.annotationBuilder);\r\n                }\r\n            }\r\n            if (isToken(config.annotationBuilder)) {\r\n                builder = this.container.resolve(config.annotationBuilder, { container: this.container });\r\n            } else if (config.annotationBuilder instanceof AnnotationBuilder) {\r\n                builder = config.annotationBuilder;\r\n            }\r\n        }\r\n        if (!builder && token) {\r\n            this.container.getTokenExtendsChain(token).forEach(tk => {\r\n                if (builder) {\r\n                    return false;\r\n                }\r\n                let buildToken = new InjectAnnotationBuilder<T>(tk);\r\n                if (this.container.has(buildToken)) {\r\n                    builder = this.container.resolve(buildToken, { container: this.container });\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        if (builder && !builder.container) {\r\n            builder.container = this.container;\r\n        }\r\n        return builder || this;\r\n    }\r\n\r\n    /**\r\n     * bundle instance via config.\r\n     *\r\n     * @param {T} instance\r\n     * @param {AnnotationConfigure} config\r\n     * @param {IContainer} [container]\r\n     * @returns {Promise<T>}\r\n     * @memberof BootBuilder\r\n     */\r\n    async buildStrategy(instance: T, config: AnnotationConfigure<T>, data?: any): Promise<T> {\r\n        return instance;\r\n    }\r\n\r\n    getType(config: AnnotationConfigure<T>): Token<T> {\r\n        return config.token || config.type;\r\n    }\r\n\r\n    /**\r\n     * register extension before create instance.\r\n     *\r\n     * @protected\r\n     * @param {AnnotationConfigure<T>} [config]\r\n     * @memberof AnnotationBuilder\r\n     */\r\n    protected async registerExts(config?: AnnotationConfigure<T>) {\r\n\r\n    }\r\n\r\n    protected getTokenMetaConfig(token: Token<T>, config?: AnnotationConfigure<T>): AnnotationConfigure<T> {\r\n        let cfg: AnnotationConfigure<T>;\r\n        if (isClass(token)) {\r\n            cfg = this.getMetaConfig(token);\r\n        } else if (isToken(token)) {\r\n            let tokenType = this.container ? this.container.getTokenImpl(token) : token;\r\n            if (isClass(tokenType)) {\r\n                cfg = this.getMetaConfig(tokenType);\r\n            }\r\n        }\r\n        if (cfg) {\r\n            return lang.assign({}, cfg, config || {});\r\n        } else {\r\n            return config || {};\r\n        }\r\n    }\r\n\r\n    getDecorator() {\r\n        return Annotation.toString();\r\n    }\r\n\r\n    protected getMetaConfig(token: Type<any>): AnnotationConfigure<T> {\r\n        let accessor = this.container.resolve(AnnotationMetaAccessorToken, { decorator: this.getDecorator() });\r\n        if (accessor) {\r\n            return accessor.getMetadata(token, this.container);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected isEqual(build: IAnnotationBuilder<T>) {\r\n        if (!build) {\r\n            return false;\r\n        }\r\n        if (build === this) {\r\n            return true;\r\n        }\r\n        if (build.constructor === this.constructor) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected resolveToken(token: Token<T>, data?: any) {\r\n        return this.container.resolve(token);\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"AnnotationBuilder\",\"params\":{\"constructor\":[],\"build\":[\"token\",\"config\",\"data\"],\"buildByConfig\":[\"config\",\"data\"],\"createInstance\":[\"token\",\"config\",\"data\"],\"getBuilder\":[\"token\",\"config\"],\"buildStrategy\":[\"instance\",\"config\",\"data\"],\"getType\":[\"config\"],\"registerExts\":[\"config\"],\"getTokenMetaConfig\":[\"token\",\"config\"],\"getDecorator\":[],\"getMetaConfig\":[\"token\"],\"isEqual\":[\"build\"],\"resolveToken\":[\"token\",\"data\"]}};\n                   }\r\n","export * from './AnnotationBuilder';\r\nexport * from './AnnotationConfigure';\r\nexport * from './IAnnotation';\r\nexport * from './IAnnotationBuilder';\r\n","import 'reflect-metadata';\r\nimport {\r\n    IContainer, Token, Providers, lang, isFunction, isClass,\r\n    isToken, Singleton, Inject, Registration, Container, AnnotationMetaAccessorToken\r\n} from '@ts-ioc/core';\r\nimport { IModuleBuilder, ModuleBuilderToken, ModuleEnv } from './IModuleBuilder';\r\nimport { ModuleConfigure, ModuleConfig } from './ModuleConfigure';\r\nimport { MdInstance } from './ModuleType';\r\nimport { ContainerPool, ContainerPoolToken } from '../utils';\r\nimport { InjectRunnerToken, IRunner, Boot, DefaultRunnerToken, Service, IService, InjectServiceToken, DefaultServiceToken, Runnable, Runner } from '../runnable';\r\nimport { IAnnotationBuilder, IAnyTypeBuilder, InjectAnnotationBuilder, DefaultAnnotationBuilderToken, AnnotationBuilderToken, AnnotationBuilder } from '../annotations';\r\nimport { InjectedModule, InjectedModuleToken } from './InjectedModule';\r\nimport { DIModuleInjectorToken } from './DIModuleInjector';\r\n\r\n/**\r\n * inject module load token.\r\n *\r\n * @export\r\n * @class InjectModuleLoadToken\r\n * @extends {Registration<T>}\r\n * @template T\r\n */\r\nexport class InjectModuleLoadToken<T> extends Registration<T> {\r\n    constructor(token: Token<T>) {\r\n        super(token, 'module_loader')\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"InjectModuleLoadToken\",\"params\":{\"constructor\":[\"token\"]}};\n                   }\r\n\r\n\r\n/**\r\n * module builder\r\n *\r\n * @export\r\n * @class ModuleBuilder\r\n * @implements {IModuleBuilder}\r\n * @template T\r\n */\r\n@Singleton(ModuleBuilderToken)\r\nexport class ModuleBuilder<T> implements IModuleBuilder<T> {\r\n\r\n    @Inject(ContainerPoolToken)\r\n    protected pools: ContainerPool;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    getPools(): ContainerPool {\r\n        return this.pools;\r\n    }\r\n\r\n    /**\r\n     * build module.\r\n     *\r\n     * @param {(Token<T> | ModuleConfig<T>)} token\r\n     * @param {ModuleEnv} [env]\r\n     * @param {*} [data] bootstrap data, build data, Runnable data.\r\n     * @returns {Promise<T>}\r\n     * @memberof ModuleBuilder\r\n     */\r\n    async build(token: Token<T> | ModuleConfig<T>, env?: ModuleEnv, data?: any): Promise<T> {\r\n        let injmdl = await this.load(token, env);\r\n        let container = injmdl.container;\r\n        let cfg = injmdl.config;\r\n        let annBuilder = this.getAnnoBuilder(container, injmdl.token, cfg.annotationBuilder);\r\n        if (!injmdl.token) {\r\n            let instance = await annBuilder.buildByConfig(cfg, data);\r\n            return instance;\r\n        } else {\r\n            let instance = await annBuilder.build(injmdl.token, cfg, data);\r\n            let mdlInst = instance as MdInstance<T>;\r\n            if (mdlInst && isFunction(mdlInst.mdOnInit)) {\r\n                mdlInst.mdOnInit(injmdl);\r\n            }\r\n            return instance;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * bootstrap module's main.\r\n    *\r\n    * @param {(Token<T> | ModuleConfig<T>)} token\r\n    * @param {ModuleEnv} [env]\r\n    * @param {*} [data] bootstrap data, build data, Runnable data.\r\n    * @returns {Promise<MdInstance<T>>}\r\n    * @memberof ModuleBuilder\r\n    */\r\n    async bootstrap(token: Token<T> | ModuleConfig<T>, env?: ModuleEnv, data?: any): Promise<Runnable<T>> {\r\n        let injmdl = await this.load(token, env);\r\n        let cfg = injmdl.config;\r\n        let container = injmdl.container;\r\n        let md = await this.build(token, injmdl, data) as MdInstance<T>;\r\n        let bootToken = this.getBootType(cfg);\r\n        let anBuilder = this.getAnnoBuilder(container, bootToken, cfg.annotationBuilder);\r\n        let bootInstance = await (bootToken ? anBuilder.build(bootToken, cfg, data) : anBuilder.buildByConfig(cfg, data));\r\n        let runable;\r\n        if (bootInstance) {\r\n            runable = await this.autoRun(container, bootToken ? bootToken : anBuilder.getType(cfg), cfg, bootInstance, data);\r\n            if (md && isFunction(md.mdOnStart)) {\r\n                await Promise.resolve(md.mdOnStart(bootInstance));\r\n            }\r\n        } else {\r\n            runable = await this.autoRun(container, injmdl.token, cfg, md, data);\r\n        }\r\n        return runable;\r\n    }\r\n\r\n    async import(token: Token<T>, parent?: IContainer): Promise<InjectedModule<T>> {\r\n        if (!parent) {\r\n            parent = await this.getParentContainer();\r\n        }\r\n        let type = isClass(token) ? token : parent.getTokenImpl(token);\r\n        if (isClass(type)) {\r\n            let key = new InjectedModuleToken(type);\r\n            if (parent.hasRegister(key.toString())) {\r\n                return parent.get(key)\r\n            } else {\r\n                await parent.loadModule(type);\r\n                if (parent.has(key)) {\r\n                    return parent.get(key);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected async load(token: Token<T> | ModuleConfigure, env?: ModuleEnv): Promise<InjectedModule<T>> {\r\n        if (env instanceof InjectedModule) {\r\n            return env;\r\n        }\r\n        let injmdl: InjectedModule<T> = null;\r\n        let parent = await this.getParentContainer(env);\r\n        if (isToken(token)) {\r\n            injmdl = await this.import(token, parent);\r\n            if (!injmdl) {\r\n                let cfg = parent.get(AnnotationMetaAccessorToken).getMetadata(token, parent);\r\n                injmdl = new InjectedModule(token, cfg, parent);\r\n            }\r\n        } else {\r\n            let mdtype = this.getType(token);\r\n            if (isToken(mdtype)) {\r\n                injmdl = await this.import(mdtype, parent);\r\n                if (injmdl instanceof InjectedModule) {\r\n                    let container = injmdl.container;\r\n                    let injector = container.get(DIModuleInjectorToken);\r\n                    await injector.importByConfig(container, token);\r\n                    injmdl.config = lang.assign(injmdl.config, token);\r\n                }\r\n            } else {\r\n                mdtype = null;\r\n            }\r\n            if (!injmdl) {\r\n                let injector = parent.get(DIModuleInjectorToken);\r\n                await injector.importByConfig(parent, token)\r\n                injmdl = new InjectedModule(mdtype, token, parent);\r\n            }\r\n        }\r\n\r\n        return injmdl;\r\n    }\r\n\r\n\r\n    protected async getParentContainer(env?: ModuleEnv) {\r\n        let parent: IContainer;\r\n        if (env) {\r\n            if (env instanceof Container) {\r\n                parent = env;\r\n            } else if (env instanceof InjectedModule) {\r\n                parent = env.container.parent;\r\n            }\r\n        }\r\n        if (!parent) {\r\n            parent = this.getPools().getDefault();\r\n        }\r\n        return parent;\r\n\r\n    }\r\n\r\n    protected async autoRun(container: IContainer, token: Token<any>, cfg: ModuleConfigure, instance: any, data?: any): Promise<Runnable<T>> {\r\n        if (!instance) {\r\n            return null;\r\n        }\r\n\r\n        if (instance instanceof Runner) {\r\n            await instance.run(data);\r\n            return instance;\r\n        } else if (instance instanceof Service) {\r\n            await instance.start(data);\r\n            return instance;\r\n        } else {\r\n            let runner: IRunner<T>, service: IService<T>;\r\n            let provider = { token: token, instance: instance, config: cfg };\r\n            container.getTokenExtendsChain(token).forEach(tk => {\r\n                if (runner || service) {\r\n                    return false;\r\n                }\r\n                let runnerToken = new InjectRunnerToken<T>(tk);\r\n                if (container.has(runnerToken)) {\r\n                    runner = container.resolve(runnerToken, provider);\r\n                }\r\n                let serviceToken = new InjectServiceToken<T>(tk);\r\n                if (container.has(serviceToken)) {\r\n                    service = container.resolve(serviceToken, provider);\r\n                }\r\n                return true;\r\n            });\r\n            if (!runner) {\r\n                this.getDefaultRunner(container, provider)\r\n            }\r\n            if (!runner && !service) {\r\n                this.getDefaultService(container, provider)\r\n            }\r\n            if (runner) {\r\n                await runner.run(data);\r\n                return runner;\r\n            } else if (service) {\r\n                await service.start(data);\r\n                return service;\r\n            } else if (token && cfg.autorun) {\r\n                await container.invoke(token, cfg.autorun, instance, { data: data });\r\n                return instance;\r\n            } else {\r\n                return instance;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getDefaultRunner(container: IContainer, ...providers: Providers[]): IRunner<T> {\r\n        if (container.has(DefaultRunnerToken)) {\r\n            return container.resolve(DefaultRunnerToken, ...providers)\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected getDefaultService(container: IContainer, ...providers: Providers[]): IService<T> {\r\n        if (container.has(DefaultServiceToken)) {\r\n            return container.resolve(DefaultServiceToken, ...providers)\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected getAnnoBuilder(container: IContainer, token: Token<any>, annBuilder: Token<IAnnotationBuilder<any>> | IAnnotationBuilder<any>): IAnyTypeBuilder {\r\n        let builder: IAnnotationBuilder<any>;\r\n        if (isClass(annBuilder)) {\r\n            if (!container.has(annBuilder)) {\r\n                container.register(annBuilder);\r\n            }\r\n        }\r\n\r\n        if (isToken(annBuilder)) {\r\n            builder = container.resolve(annBuilder);\r\n        } else if (annBuilder instanceof AnnotationBuilder) {\r\n            builder = annBuilder;\r\n        }\r\n        if (!builder && token) {\r\n            container.getTokenExtendsChain(token).forEach(tk => {\r\n                if (builder) {\r\n                    return false;\r\n                }\r\n                let buildToken = new InjectAnnotationBuilder<T>(tk);\r\n                if (container.has(buildToken)) {\r\n                    builder = container.resolve(buildToken);\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        if (!builder) {\r\n            builder = this.getDefaultAnnBuilder(container);\r\n        }\r\n\r\n        if (builder) {\r\n            builder.container = container\r\n        }\r\n        return builder;\r\n    }\r\n\r\n\r\n    protected getDefaultAnnBuilder(container: IContainer): IAnnotationBuilder<any> {\r\n        if (container.has(DefaultAnnotationBuilderToken)) {\r\n            return container.resolve(DefaultAnnotationBuilderToken);\r\n        }\r\n        return container.resolve(AnnotationBuilderToken);\r\n    }\r\n\r\n    /**\r\n     * get module type\r\n     *\r\n     * @protected\r\n     * @param {ModuleConfigure} cfg\r\n     * @returns {Token<T>}\r\n     * @memberof ModuleBuilder\r\n     */\r\n    protected getType(cfg: ModuleConfigure): Token<T> {\r\n        return cfg.token || cfg.type;\r\n    }\r\n\r\n    /**\r\n     * get boot type.\r\n     *\r\n     * @protected\r\n     * @param {ModuleConfigure} cfg\r\n     * @returns {Token<T>}\r\n     * @memberof ModuleBuilder\r\n     */\r\n    protected getBootType(cfg: ModuleConfigure): Token<T> {\r\n        return cfg.bootstrap;\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"ModuleBuilder\",\"params\":{\"constructor\":[],\"getPools\":[],\"build\":[\"token\",\"env\",\"data\"],\"bootstrap\":[\"token\",\"env\",\"data\"],\"import\":[\"token\",\"parent\"],\"load\":[\"token\",\"env\"],\"getParentContainer\":[\"env\"],\"autoRun\":[\"container\",\"token\",\"cfg\",\"instance\",\"data\"],\"getDefaultRunner\":[\"container\",\"providers\"],\"getDefaultService\":[\"container\",\"providers\"],\"getAnnoBuilder\":[\"container\",\"token\",\"annBuilder\"],\"getDefaultAnnBuilder\":[\"container\"],\"getType\":[\"cfg\"],\"getBootType\":[\"cfg\"]}};\n                   }\r\n","export * from './DIModuleInjector';\r\nexport * from './DIModuleValidate';\r\nexport * from './InjectedModule';\r\nexport * from './IModuleBuilder';\r\nexport * from './ModuleBuilder';\r\nexport * from './ModuleConfigure';\r\nexport * from './ModuleType';\r\n","import { IContainer, Inject, ContainerToken, LifeScopeToken, IocExt, CoreActions } from '@ts-ioc/core';\r\nimport { DIModule, Bootstrap } from './decorators';\r\nimport * as modus from './modules';\r\nimport * as boot from './boot';\r\nimport * as annotations from './annotations';\r\n\r\n\r\n/**\r\n * Bootstrap ext for ioc. auto run setup after registered.\r\n * with @IocExt('setup') decorator.\r\n * @export\r\n * @class BootModule\r\n */\r\n@IocExt('setup')\r\nexport class BootModule {\r\n\r\n    constructor(@Inject(ContainerToken) private container: IContainer) {\r\n\r\n    }\r\n\r\n    /**\r\n     * register aop for container.\r\n     *\r\n     * @memberof AopModule\r\n     */\r\n    setup() {\r\n        let container = this.container;\r\n\r\n        let lifeScope = container.get(LifeScopeToken);\r\n\r\n        lifeScope.registerDecorator(DIModule, CoreActions.bindProvider, CoreActions.cache, CoreActions.componentBeforeInit, CoreActions.componentInit, CoreActions.componentAfterInit);\r\n        lifeScope.registerDecorator(Bootstrap, CoreActions.bindProvider, CoreActions.cache, CoreActions.componentBeforeInit, CoreActions.componentInit, CoreActions.componentAfterInit);\r\n\r\n        container.use(annotations, modus, boot);\r\n    }\r\n\n                        static classAnnations:any  = {\"name\":\"BootModule\",\"params\":{\"constructor\":[\"container\"],\"setup\":[]}};\n                   }\r\n","import { AppConfigure, AppConfigureToken, DefaultConfigureToken, AppConfigureLoaderToken } from './AppConfigure';\r\nimport { IContainer, LoadType, lang, isString, MapSet, Factory, Token, isUndefined, DefaultContainerBuilder, IContainerBuilder, isClass, isToken } from '@ts-ioc/core';\r\nimport { IApplicationBuilder, CustomRegister, AnyApplicationBuilder } from './IApplicationBuilder';\r\nimport { ModuleBuilder, ModuleEnv, DIModuleInjectorToken, InjectedModule, IModuleBuilder, InjectModuleBuilderToken, DefaultModuleBuilderToken, ModuleBuilderToken, ModuleConfig } from '../modules';\r\nimport { ContainerPool, ContainerPoolToken, Events, IEvents } from '../utils';\r\nimport { BootModule } from '../BootModule';\r\nimport { Runnable } from '../runnable';\r\n\r\nexport enum ApplicationEvents {\r\n    onRootContainerCreated = 'onRootContainerCreated',\r\n    onRootContainerInited = 'onRooConatianerInited'\r\n}\r\n\r\n/**\r\n * application builder.\r\n *\r\n * @export\r\n * @class Default ApplicationBuilder\r\n * @extends {ModuleBuilder}\r\n * @template T\r\n */\r\nexport class DefaultApplicationBuilder<T> extends ModuleBuilder<T> implements IApplicationBuilder<T>, IEvents {\r\n\r\n    private globalConfig: AppConfigure;\r\n    protected globalModules: LoadType[];\r\n    protected customRegs: CustomRegister<T>[];\r\n    protected beforeInitPds: MapSet<Token<any>, any>;\r\n    protected afterInitPds: MapSet<Token<any>, any>;\r\n    protected configs: (string | AppConfigure)[];\r\n    inited = false;\r\n\r\n    events: Events;\r\n\r\n    constructor(public baseURL?: string) {\r\n        super();\r\n        this.customRegs = [];\r\n        this.globalModules = [];\r\n        this.configs = [];\r\n        this.beforeInitPds = new MapSet();\r\n        this.afterInitPds = new MapSet();\r\n        this.events = new Events();\r\n        this.initEvents();\r\n    }\r\n\r\n    protected initEvents() {\r\n        this.events.on('onRooConatianerInited', (container) => {\r\n            this.afterInitPds.forEach((val, key) => {\r\n                container.bindProvider(key, val);\r\n            });\r\n        })\r\n    }\r\n\r\n    static create(baseURL?: string): AnyApplicationBuilder {\r\n        return new DefaultApplicationBuilder<any>(baseURL);\r\n    }\r\n\r\n    on(name: string, event: (...args: any[]) => void): this {\r\n        this.events.on(name, event);\r\n        return this;\r\n    }\r\n    off(name: string, event?: (...args: any[]) => void): this {\r\n        this.events.off(name, event);\r\n        return this;\r\n    }\r\n    emit(name: string, ...args: any[]): void {\r\n        this.events.emit(name, ...args);\r\n    }\r\n\r\n    getPools(): ContainerPool {\r\n        if (!this.pools) {\r\n            this.pools = new ContainerPool(this.createContainerBuilder());\r\n            this.createDefaultContainer();\r\n        }\r\n        return this.pools;\r\n    }\r\n\r\n    protected createContainerBuilder(): IContainerBuilder {\r\n        return new DefaultContainerBuilder();\r\n    }\r\n\r\n    /**\r\n     * use configuration.\r\n     *\r\n     * @param {(string | AppConfigure)} [config]\r\n     * @returns {this} global config for this application.\r\n     * @memberof Bootstrap\r\n     */\r\n    useConfiguration(config?: string | AppConfigure): this {\r\n        if (isUndefined(config)) {\r\n            config = '';\r\n        }\r\n        // clean cached config.\r\n        this.globalConfig = null;\r\n        let idx = this.configs.indexOf(config);\r\n        if (idx >= 0) {\r\n            this.configs.splice(idx, 1);\r\n        }\r\n        this.configs.push(config);\r\n\r\n        return this;\r\n    }\r\n\r\n    protected loadConfig(container: IContainer, src: string): Promise<AppConfigure> {\r\n        if (container.has(AppConfigureLoaderToken)) {\r\n            let loader = container.resolve(AppConfigureLoaderToken, { baseURL: this.baseURL, container: container });\r\n            return loader.load(src);\r\n        } else if (src) {\r\n            let builder = container.getBuilder();\r\n            return builder.loader.load([src])\r\n                .then(rs => {\r\n                    return rs.length ? rs[0] as AppConfigure : null;\r\n                })\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * use module as global Depdences module.\r\n     *\r\n     * @param {...LoadType[]} modules\r\n     * @returns {this}\r\n     * @memberof PlatformServer\r\n     */\r\n    use(...modules: LoadType[]): this {\r\n        this.globalModules = this.globalModules.concat(modules);\r\n        this.inited = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * bind provider\r\n     *\r\n     * @template T\r\n     * @param {Token<T>} provide\r\n     * @param {Token<T> | Factory<T>} provider\r\n     * @param {boolean} [beforRootInit]\r\n     * @returns {this}\r\n     * @memberof IContainer\r\n     */\r\n    provider(provide: Token<any>, provider: Token<any> | Factory<any>, beforRootInit?: boolean): this {\r\n        if (beforRootInit) {\r\n            this.beforeInitPds.set(provide, provider);\r\n        } else {\r\n            this.afterInitPds.set(provide, provider);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected async load(token: Token<T> | AppConfigure, env?: ModuleEnv): Promise<InjectedModule<T>> {\r\n        await this.initRootContainer();\r\n        return super.load(token, env);\r\n    }\r\n\r\n    async build(token: Token<T> | AppConfigure, env?: ModuleEnv, data?: any): Promise<T> {\r\n        let injmdl = await this.load(token, env);\r\n        let builder = this.getBuilder(injmdl);\r\n        return await builder.build(token, injmdl, data);\r\n    }\r\n\r\n    async bootstrap(token: Token<T> | AppConfigure, env?: ModuleEnv, data?: any): Promise<Runnable<T>> {\r\n        let injmdl = await this.load(token, env);\r\n        let builder = this.getBuilder(injmdl);\r\n        return await builder.bootstrap(token, injmdl, data);\r\n    }\r\n\r\n    /**\r\n     * get module builder\r\n     *\r\n     * @param {(Token<T> | ModuleConfig<T>)} token\r\n     * @param {ModuleEnv} [env]\r\n     * @returns {IModuleBuilder<T>}\r\n     * @memberof IApplicationBuilder\r\n     */\r\n    async getBuilderByConfig(token: Token<T> | ModuleConfig<T>, env?: ModuleEnv): Promise<IModuleBuilder<T>> {\r\n        let injmdl = await this.load(token, env);\r\n        return this.getBuilder(injmdl)\r\n    }\r\n\r\n    getBuilder(injmdl: InjectedModule<T>): IModuleBuilder<T> {\r\n        let cfg = injmdl.config;\r\n        let container = injmdl.container;\r\n        let builder: IModuleBuilder<T>;\r\n        if (cfg) {\r\n            if (isClass(cfg.builder)) {\r\n                if (!container.has(cfg.builder)) {\r\n                    container.register(cfg.builder);\r\n                }\r\n            }\r\n            if (isToken(cfg.builder)) {\r\n                builder = container.resolve(cfg.builder);\r\n            } else if (cfg.builder instanceof ModuleBuilder) {\r\n                builder = cfg.builder;\r\n            }\r\n        }\r\n\r\n        let tko = injmdl.token;\r\n        if (!builder && tko) {\r\n            container.getTokenExtendsChain(tko).forEach(tk => {\r\n                if (builder) {\r\n                    return false;\r\n                }\r\n                let buildToken = new InjectModuleBuilderToken<T>(tk);\r\n                if (container.has(buildToken)) {\r\n                    builder = container.get(buildToken);\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        if (!builder) {\r\n            builder = this.getDefaultBuilder(container);\r\n        }\r\n\r\n        return builder || this;\r\n    }\r\n\r\n    protected getDefaultBuilder(container: IContainer): IModuleBuilder<any> {\r\n        if (container.has(DefaultModuleBuilderToken)) {\r\n            return container.resolve(DefaultModuleBuilderToken);\r\n        }\r\n        return container.resolve(ModuleBuilderToken);\r\n    }\r\n\r\n\r\n    protected async getGlobalConfig(container: IContainer): Promise<AppConfigure> {\r\n        if (!this.globalConfig) {\r\n            let globCfg = await this.getDefaultConfig(container);\r\n            if (this.configs.length < 1) {\r\n                this.configs.push(''); // load default loader config.\r\n            }\r\n            let exts = await Promise.all(this.configs.map(cfg => {\r\n                if (isString(cfg)) {\r\n                    return this.loadConfig(container, cfg);\r\n                } else {\r\n                    return cfg;\r\n                }\r\n            }));\r\n            exts.forEach(exCfg => {\r\n                if (exCfg) {\r\n                    lang.assign(globCfg, exCfg);\r\n                }\r\n            });\r\n            this.globalConfig = globCfg;\r\n        }\r\n        return this.globalConfig;\r\n    }\r\n\r\n    protected createDefaultContainer() {\r\n        let container = this.pools.getDefault();\r\n        container.register(BootModule);\r\n\r\n        let chain = container.getBuilder().getInjectorChain(container);\r\n        chain.first(container.resolve(DIModuleInjectorToken));\r\n        container.bindProvider(ContainerPoolToken, () => this.getPools());\r\n\r\n        this.beforeInitPds.forEach((val, key) => {\r\n            container.bindProvider(key, val);\r\n        });\r\n\r\n        this.events.emit(ApplicationEvents.onRootContainerCreated, container);\r\n        return container;\r\n    }\r\n\r\n    protected async initRootContainer(container?: IContainer) {\r\n        if (this.inited) {\r\n            return;\r\n        }\r\n        container = container || this.getPools().getDefault();\r\n        let globCfg = await this.getGlobalConfig(container);\r\n        await this.registerExts(container, globCfg);\r\n        this.bindAppConfig(globCfg);\r\n        container.bindProvider(AppConfigureToken, globCfg);\r\n        this.inited = true;\r\n        this.events.emit(ApplicationEvents.onRootContainerInited, container);\r\n    }\r\n\r\n    /**\r\n     * register ioc exts\r\n     *\r\n     * @protected\r\n     * @param {IContainer} container\r\n     * @param {AppConfigure} config\r\n     * @returns {Promise<IContainer>}\r\n     * @memberof ApplicationBuilder\r\n     */\r\n    protected async registerExts(container: IContainer, config: AppConfigure): Promise<IContainer> {\r\n\r\n        if (this.globalModules.length) {\r\n            let usedModules = this.globalModules;\r\n            await container.loadModule(...usedModules);\r\n        }\r\n\r\n        if (this.customRegs.length) {\r\n            await Promise.all(this.customRegs.map(async cs => {\r\n                let tokens = await cs(container, config, this);\r\n                return tokens;\r\n            }));\r\n        }\r\n\r\n        return container;\r\n    }\r\n\r\n    protected bindAppConfig(config: AppConfigure): AppConfigure {\r\n        if (this.baseURL) {\r\n            config.baseURL = this.baseURL;\r\n        }\r\n        return config;\r\n    }\r\n\r\n    protected async getDefaultConfig(container: IContainer): Promise<AppConfigure> {\r\n        if (container.has(DefaultConfigureToken)) {\r\n            return container.resolve(DefaultConfigureToken);\r\n        } else {\r\n            return {} as AppConfigure;\r\n        }\r\n    }\r\n\r\n\n                        static classAnnations:any  = {\"name\":\"DefaultApplicationBuilder\",\"params\":{\"constructor\":[\"baseURL\"],\"initEvents\":[],\"create\":[\"baseURL\"],\"on\":[\"name\",\"event\"],\"off\":[\"name\",\"event\"],\"emit\":[\"name\",\"args\"],\"getPools\":[],\"createContainerBuilder\":[],\"useConfiguration\":[\"config\"],\"loadConfig\":[\"container\",\"src\"],\"use\":[\"modules\"],\"provider\":[\"provide\",\"provider\",\"beforRootInit\"],\"load\":[\"token\",\"env\"],\"build\":[\"token\",\"env\",\"data\"],\"bootstrap\":[\"token\",\"env\",\"data\"],\"getBuilderByConfig\":[\"token\",\"env\"],\"getBuilder\":[\"injmdl\"],\"getDefaultBuilder\":[\"container\"],\"getGlobalConfig\":[\"container\"],\"createDefaultContainer\":[],\"initRootContainer\":[\"container\"],\"registerExts\":[\"container\",\"config\"],\"bindAppConfig\":[\"config\"],\"getDefaultConfig\":[\"container\"]}};\n                   }\r\n","import { Token, InjectToken, IContainer, LoadType, Factory } from '@ts-ioc/core';\r\nimport { AppConfigure } from './AppConfigure';\r\nimport { IModuleBuilder, MdInstance, ModuleEnv, ModuleConfig, InjectedModule } from '../modules';\r\nimport { Events, IEvents } from '../utils';\r\n\r\n/**\r\n * custom define module.\r\n */\r\nexport type CustomRegister<T> = (container: IContainer, config?: AppConfigure, builder?: IApplicationBuilder<T>) => Token<T>[] | Promise<Token<T>[]>;\r\n\r\n\r\n/**\r\n * use module extends application.\r\n *\r\n * @export\r\n * @interface IApplicationExtends\r\n */\r\nexport interface IApplicationExtends {\r\n    /**\r\n     * use custom configuration.\r\n     *\r\n     * @param {(string | AppConfigure)} [config]\r\n     * @returns {this}\r\n     * @memberof IApplicationBuilder\r\n     */\r\n    useConfiguration(config?: string | AppConfigure): this;\r\n\r\n    /**\r\n     * use module\r\n     *\r\n     * @param {...LoadType[]} modules\r\n     * @returns {this}\r\n     * @memberof IApplicationBuilder\r\n     */\r\n    use(...modules: LoadType[]): this;\r\n\r\n    /**\r\n     * bind provider\r\n     *\r\n     * @param {Token<any>} provide\r\n     * @param {(Token<any> | Factory<any>)} provider\r\n     * @param {boolean} [beforRootInit]\r\n     * @returns {this}\r\n     * @memberof IApplicationExtends\r\n     */\r\n    provider(provide: Token<any>, provider: Token<any> | Factory<any>, beforRootInit?: boolean): this;\r\n\r\n}\r\n\r\n\r\n/**\r\n * application builder.\r\n *\r\n * @export\r\n * @interface IApplicationBuilder\r\n * @extends {IModuleBuilder<T>}\r\n * @template T\r\n */\r\nexport interface IApplicationBuilder<T> extends IModuleBuilder<T>, IApplicationExtends, IEvents {\r\n    /**\r\n     * events mgr.\r\n     *\r\n     * @type {Events}\r\n     * @memberof IApplicationBuilder\r\n     */\r\n    events?: Events;\r\n\r\n    /**\r\n     * get builder by token, config and env.\r\n     *\r\n     * @param {(Token<T> | ModuleConfig<T>)} token\r\n     * @param {ModuleEnv} [env]\r\n     * @returns {Promise<IModuleBuilder<T>>}\r\n     * @memberof IApplicationBuilder\r\n     */\r\n    getBuilderByConfig(token: Token<T> | ModuleConfig<T>, env?: ModuleEnv): Promise<IModuleBuilder<T>>;\r\n\r\n    /**\r\n     * get module builder\r\n     *\r\n     * @param {InjectedModule<T>} injmdl\r\n     * @returns {IModuleBuilder<T>}\r\n     * @memberof IModuleBuilder\r\n     */\r\n    getBuilder(injmdl: InjectedModule<T>): IModuleBuilder<T>;\r\n\r\n}\r\n\r\n\r\n\r\nexport const ApplicationBuilderToken = new InjectToken<AnyApplicationBuilder>('DI_AppBuilder');\r\n\r\n/**\r\n * application builder. objected generics to any\r\n *\r\n * @export\r\n * @interface AnyApplicationBuilder\r\n * @extends {IApplicationBuilder<any>}\r\n * @template T\r\n */\r\nexport interface AnyApplicationBuilder extends IApplicationBuilder<any> {\r\n    /**\r\n     * build module as ioc container.\r\n     *\r\n     * @param {(Token<T> | ModuleConfig<T>)} token\r\n     * @param {ModuleEnv} [defaultContainer]\r\n     * @returns {Promise<MdInstance<T>>}\r\n     * @memberof IModuleBuilder\r\n     */\r\n    build<T>(token: Token<T> | ModuleConfig<T>, env?: ModuleEnv): Promise<MdInstance<T>>;\r\n\r\n}\r\n","export * from './AppConfigure';\r\nexport * from './IApplication';\r\nexport * from './ApplicationBuilder';\r\nexport * from './IApplicationBuilder';\r\n","export * from './decorators';\r\nexport * from './boot';\r\nexport * from './annotations';\r\nexport * from './modules';\r\nexport * from './runnable';\r\nexport * from './utils';\r\nexport * from './BootModule';\r\n\r\n"],"names":["DIModule_1","decorators_1","utils_1","DIModuleValidate_1","IAnnotationBuilder_1","runnable_1","annotations_1","IModuleBuilder_1","modus","modules_1","AppConfigure_1","modules"],"mappings":"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"}